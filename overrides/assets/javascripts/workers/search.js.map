{
  "version": 3,
  "sources": ["node_modules/lunr/lunr.js", "src/templates/assets/javascripts/integrations/search/worker/main/index.ts", "src/templates/assets/javascripts/browser/element/_/index.ts", "src/templates/assets/javascripts/polyfills/index.ts", "src/templates/assets/javascripts/integrations/search/config/index.ts", "src/templates/assets/javascripts/integrations/search/internal/_/index.ts", "src/templates/assets/javascripts/integrations/search/internal/extract/index.ts", "src/templates/assets/javascripts/integrations/search/internal/highlight/index.ts", "src/templates/assets/javascripts/integrations/search/internal/tokenize/index.ts", "src/templates/assets/javascripts/integrations/search/query/transform/index.ts", "src/templates/assets/javascripts/integrations/search/query/_/index.ts", "src/templates/assets/javascripts/integrations/search/query/segment/index.ts", "src/templates/assets/javascripts/integrations/search/_/index.ts"],
  "sourcesContent": ["/**\n * lunr - http://lunrjs.com - A bit like Solr, but much smaller and not as bright - 2.3.9\n * Copyright (C) 2020 Oliver Nightingale\n * @license MIT\n */\n\n;(function(){\n\n/**\n * A convenience function for configuring and constructing\n * a new lunr Index.\n *\n * A lunr.Builder instance is created and the pipeline setup\n * with a trimmer, stop word filter and stemmer.\n *\n * This builder object is yielded to the configuration function\n * that is passed as a parameter, allowing the list of fields\n * and other builder parameters to be customised.\n *\n * All documents _must_ be added within the passed config function.\n *\n * @example\n * var idx = lunr(function () {\n *   this.field('title')\n *   this.field('body')\n *   this.ref('id')\n *\n *   documents.forEach(function (doc) {\n *     this.add(doc)\n *   }, this)\n * })\n *\n * @see {@link lunr.Builder}\n * @see {@link lunr.Pipeline}\n * @see {@link lunr.trimmer}\n * @see {@link lunr.stopWordFilter}\n * @see {@link lunr.stemmer}\n * @namespace {function} lunr\n */\nvar lunr = function (config) {\n  var builder = new lunr.Builder\n\n  builder.pipeline.add(\n    lunr.trimmer,\n    lunr.stopWordFilter,\n    lunr.stemmer\n  )\n\n  builder.searchPipeline.add(\n    lunr.stemmer\n  )\n\n  config.call(builder, builder)\n  return builder.build()\n}\n\nlunr.version = \"2.3.9\"\n/*!\n * lunr.utils\n * Copyright (C) 2020 Oliver Nightingale\n */\n\n/**\n * A namespace containing utils for the rest of the lunr library\n * @namespace lunr.utils\n */\nlunr.utils = {}\n\n/**\n * Print a warning message to the console.\n *\n * @param {String} message The message to be printed.\n * @memberOf lunr.utils\n * @function\n */\nlunr.utils.warn = (function (global) {\n  /* eslint-disable no-console */\n  return function (message) {\n    if (global.console && console.warn) {\n      console.warn(message)\n    }\n  }\n  /* eslint-enable no-console */\n})(this)\n\n/**\n * Convert an object to a string.\n *\n * In the case of `null` and `undefined` the function returns\n * the empty string, in all other cases the result of calling\n * `toString` on the passed object is returned.\n *\n * @param {Any} obj The object to convert to a string.\n * @return {String} string representation of the passed object.\n * @memberOf lunr.utils\n */\nlunr.utils.asString = function (obj) {\n  if (obj === void 0 || obj === null) {\n    return \"\"\n  } else {\n    return obj.toString()\n  }\n}\n\n/**\n * Clones an object.\n *\n * Will create a copy of an existing object such that any mutations\n * on the copy cannot affect the original.\n *\n * Only shallow objects are supported, passing a nested object to this\n * function will cause a TypeError.\n *\n * Objects with primitives, and arrays of primitives are supported.\n *\n * @param {Object} obj The object to clone.\n * @return {Object} a clone of the passed object.\n * @throws {TypeError} when a nested object is passed.\n * @memberOf Utils\n */\nlunr.utils.clone = function (obj) {\n  if (obj === null || obj === undefined) {\n    return obj\n  }\n\n  var clone = Object.create(null),\n      keys = Object.keys(obj)\n\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i],\n        val = obj[key]\n\n    if (Array.isArray(val)) {\n      clone[key] = val.slice()\n      continue\n    }\n\n    if (typeof val === 'string' ||\n        typeof val === 'number' ||\n        typeof val === 'boolean') {\n      clone[key] = val\n      continue\n    }\n\n    throw new TypeError(\"clone is not deep and does not support nested objects\")\n  }\n\n  return clone\n}\nlunr.FieldRef = function (docRef, fieldName, stringValue) {\n  this.docRef = docRef\n  this.fieldName = fieldName\n  this._stringValue = stringValue\n}\n\nlunr.FieldRef.joiner = \"/\"\n\nlunr.FieldRef.fromString = function (s) {\n  var n = s.indexOf(lunr.FieldRef.joiner)\n\n  if (n === -1) {\n    throw \"malformed field ref string\"\n  }\n\n  var fieldRef = s.slice(0, n),\n      docRef = s.slice(n + 1)\n\n  return new lunr.FieldRef (docRef, fieldRef, s)\n}\n\nlunr.FieldRef.prototype.toString = function () {\n  if (this._stringValue == undefined) {\n    this._stringValue = this.fieldName + lunr.FieldRef.joiner + this.docRef\n  }\n\n  return this._stringValue\n}\n/*!\n * lunr.Set\n * Copyright (C) 2020 Oliver Nightingale\n */\n\n/**\n * A lunr set.\n *\n * @constructor\n */\nlunr.Set = function (elements) {\n  this.elements = Object.create(null)\n\n  if (elements) {\n    this.length = elements.length\n\n    for (var i = 0; i < this.length; i++) {\n      this.elements[elements[i]] = true\n    }\n  } else {\n    this.length = 0\n  }\n}\n\n/**\n * A complete set that contains all elements.\n *\n * @static\n * @readonly\n * @type {lunr.Set}\n */\nlunr.Set.complete = {\n  intersect: function (other) {\n    return other\n  },\n\n  union: function () {\n    return this\n  },\n\n  contains: function () {\n    return true\n  }\n}\n\n/**\n * An empty set that contains no elements.\n *\n * @static\n * @readonly\n * @type {lunr.Set}\n */\nlunr.Set.empty = {\n  intersect: function () {\n    return this\n  },\n\n  union: function (other) {\n    return other\n  },\n\n  contains: function () {\n    return false\n  }\n}\n\n/**\n * Returns true if this set contains the specified object.\n *\n * @param {object} object - Object whose presence in this set is to be tested.\n * @returns {boolean} - True if this set contains the specified object.\n */\nlunr.Set.prototype.contains = function (object) {\n  return !!this.elements[object]\n}\n\n/**\n * Returns a new set containing only the elements that are present in both\n * this set and the specified set.\n *\n * @param {lunr.Set} other - set to intersect with this set.\n * @returns {lunr.Set} a new set that is the intersection of this and the specified set.\n */\n\nlunr.Set.prototype.intersect = function (other) {\n  var a, b, elements, intersection = []\n\n  if (other === lunr.Set.complete) {\n    return this\n  }\n\n  if (other === lunr.Set.empty) {\n    return other\n  }\n\n  if (this.length < other.length) {\n    a = this\n    b = other\n  } else {\n    a = other\n    b = this\n  }\n\n  elements = Object.keys(a.elements)\n\n  for (var i = 0; i < elements.length; i++) {\n    var element = elements[i]\n    if (element in b.elements) {\n      intersection.push(element)\n    }\n  }\n\n  return new lunr.Set (intersection)\n}\n\n/**\n * Returns a new set combining the elements of this and the specified set.\n *\n * @param {lunr.Set} other - set to union with this set.\n * @return {lunr.Set} a new set that is the union of this and the specified set.\n */\n\nlunr.Set.prototype.union = function (other) {\n  if (other === lunr.Set.complete) {\n    return lunr.Set.complete\n  }\n\n  if (other === lunr.Set.empty) {\n    return this\n  }\n\n  return new lunr.Set(Object.keys(this.elements).concat(Object.keys(other.elements)))\n}\n/**\n * A function to calculate the inverse document frequency for\n * a posting. This is shared between the builder and the index\n *\n * @private\n * @param {object} posting - The posting for a given term\n * @param {number} documentCount - The total number of documents.\n */\nlunr.idf = function (posting, documentCount) {\n  var documentsWithTerm = 0\n\n  for (var fieldName in posting) {\n    if (fieldName == '_index') continue // Ignore the term index, its not a field\n    documentsWithTerm += Object.keys(posting[fieldName]).length\n  }\n\n  var x = (documentCount - documentsWithTerm + 0.5) / (documentsWithTerm + 0.5)\n\n  return Math.log(1 + Math.abs(x))\n}\n\n/**\n * A token wraps a string representation of a token\n * as it is passed through the text processing pipeline.\n *\n * @constructor\n * @param {string} [str=''] - The string token being wrapped.\n * @param {object} [metadata={}] - Metadata associated with this token.\n */\nlunr.Token = function (str, metadata) {\n  this.str = str || \"\"\n  this.metadata = metadata || {}\n}\n\n/**\n * Returns the token string that is being wrapped by this object.\n *\n * @returns {string}\n */\nlunr.Token.prototype.toString = function () {\n  return this.str\n}\n\n/**\n * A token update function is used when updating or optionally\n * when cloning a token.\n *\n * @callback lunr.Token~updateFunction\n * @param {string} str - The string representation of the token.\n * @param {Object} metadata - All metadata associated with this token.\n */\n\n/**\n * Applies the given function to the wrapped string token.\n *\n * @example\n * token.update(function (str, metadata) {\n *   return str.toUpperCase()\n * })\n *\n * @param {lunr.Token~updateFunction} fn - A function to apply to the token string.\n * @returns {lunr.Token}\n */\nlunr.Token.prototype.update = function (fn) {\n  this.str = fn(this.str, this.metadata)\n  return this\n}\n\n/**\n * Creates a clone of this token. Optionally a function can be\n * applied to the cloned token.\n *\n * @param {lunr.Token~updateFunction} [fn] - An optional function to apply to the cloned token.\n * @returns {lunr.Token}\n */\nlunr.Token.prototype.clone = function (fn) {\n  fn = fn || function (s) { return s }\n  return new lunr.Token (fn(this.str, this.metadata), this.metadata)\n}\n/*!\n * lunr.tokenizer\n * Copyright (C) 2020 Oliver Nightingale\n */\n\n/**\n * A function for splitting a string into tokens ready to be inserted into\n * the search index. Uses `lunr.tokenizer.separator` to split strings, change\n * the value of this property to change how strings are split into tokens.\n *\n * This tokenizer will convert its parameter to a string by calling `toString` and\n * then will split this string on the character in `lunr.tokenizer.separator`.\n * Arrays will have their elements converted to strings and wrapped in a lunr.Token.\n *\n * Optional metadata can be passed to the tokenizer, this metadata will be cloned and\n * added as metadata to every token that is created from the object to be tokenized.\n *\n * @static\n * @param {?(string|object|object[])} obj - The object to convert into tokens\n * @param {?object} metadata - Optional metadata to associate with every token\n * @returns {lunr.Token[]}\n * @see {@link lunr.Pipeline}\n */\nlunr.tokenizer = function (obj, metadata) {\n  if (obj == null || obj == undefined) {\n    return []\n  }\n\n  if (Array.isArray(obj)) {\n    return obj.map(function (t) {\n      return new lunr.Token(\n        lunr.utils.asString(t).toLowerCase(),\n        lunr.utils.clone(metadata)\n      )\n    })\n  }\n\n  var str = obj.toString().toLowerCase(),\n      len = str.length,\n      tokens = []\n\n  for (var sliceEnd = 0, sliceStart = 0; sliceEnd <= len; sliceEnd++) {\n    var char = str.charAt(sliceEnd),\n        sliceLength = sliceEnd - sliceStart\n\n    if ((char.match(lunr.tokenizer.separator) || sliceEnd == len)) {\n\n      if (sliceLength > 0) {\n        var tokenMetadata = lunr.utils.clone(metadata) || {}\n        tokenMetadata[\"position\"] = [sliceStart, sliceLength]\n        tokenMetadata[\"index\"] = tokens.length\n\n        tokens.push(\n          new lunr.Token (\n            str.slice(sliceStart, sliceEnd),\n            tokenMetadata\n          )\n        )\n      }\n\n      sliceStart = sliceEnd + 1\n    }\n\n  }\n\n  return tokens\n}\n\n/**\n * The separator used to split a string into tokens. Override this property to change the behaviour of\n * `lunr.tokenizer` behaviour when tokenizing strings. By default this splits on whitespace and hyphens.\n *\n * @static\n * @see lunr.tokenizer\n */\nlunr.tokenizer.separator = /[\\s\\-]+/\n/*!\n * lunr.Pipeline\n * Copyright (C) 2020 Oliver Nightingale\n */\n\n/**\n * lunr.Pipelines maintain an ordered list of functions to be applied to all\n * tokens in documents entering the search index and queries being ran against\n * the index.\n *\n * An instance of lunr.Index created with the lunr shortcut will contain a\n * pipeline with a stop word filter and an English language stemmer. Extra\n * functions can be added before or after either of these functions or these\n * default functions can be removed.\n *\n * When run the pipeline will call each function in turn, passing a token, the\n * index of that token in the original list of all tokens and finally a list of\n * all the original tokens.\n *\n * The output of functions in the pipeline will be passed to the next function\n * in the pipeline. To exclude a token from entering the index the function\n * should return undefined, the rest of the pipeline will not be called with\n * this token.\n *\n * For serialisation of pipelines to work, all functions used in an instance of\n * a pipeline should be registered with lunr.Pipeline. Registered functions can\n * then be loaded. If trying to load a serialised pipeline that uses functions\n * that are not registered an error will be thrown.\n *\n * If not planning on serialising the pipeline then registering pipeline functions\n * is not necessary.\n *\n * @constructor\n */\nlunr.Pipeline = function () {\n  this._stack = []\n}\n\nlunr.Pipeline.registeredFunctions = Object.create(null)\n\n/**\n * A pipeline function maps lunr.Token to lunr.Token. A lunr.Token contains the token\n * string as well as all known metadata. A pipeline function can mutate the token string\n * or mutate (or add) metadata for a given token.\n *\n * A pipeline function can indicate that the passed token should be discarded by returning\n * null, undefined or an empty string. This token will not be passed to any downstream pipeline\n * functions and will not be added to the index.\n *\n * Multiple tokens can be returned by returning an array of tokens. Each token will be passed\n * to any downstream pipeline functions and all will returned tokens will be added to the index.\n *\n * Any number of pipeline functions may be chained together using a lunr.Pipeline.\n *\n * @interface lunr.PipelineFunction\n * @param {lunr.Token} token - A token from the document being processed.\n * @param {number} i - The index of this token in the complete list of tokens for this document/field.\n * @param {lunr.Token[]} tokens - All tokens for this document/field.\n * @returns {(?lunr.Token|lunr.Token[])}\n */\n\n/**\n * Register a function with the pipeline.\n *\n * Functions that are used in the pipeline should be registered if the pipeline\n * needs to be serialised, or a serialised pipeline needs to be loaded.\n *\n * Registering a function does not add it to a pipeline, functions must still be\n * added to instances of the pipeline for them to be used when running a pipeline.\n *\n * @param {lunr.PipelineFunction} fn - The function to check for.\n * @param {String} label - The label to register this function with\n */\nlunr.Pipeline.registerFunction = function (fn, label) {\n  if (label in this.registeredFunctions) {\n    lunr.utils.warn('Overwriting existing registered function: ' + label)\n  }\n\n  fn.label = label\n  lunr.Pipeline.registeredFunctions[fn.label] = fn\n}\n\n/**\n * Warns if the function is not registered as a Pipeline function.\n *\n * @param {lunr.PipelineFunction} fn - The function to check for.\n * @private\n */\nlunr.Pipeline.warnIfFunctionNotRegistered = function (fn) {\n  var isRegistered = fn.label && (fn.label in this.registeredFunctions)\n\n  if (!isRegistered) {\n    lunr.utils.warn('Function is not registered with pipeline. This may cause problems when serialising the index.\\n', fn)\n  }\n}\n\n/**\n * Loads a previously serialised pipeline.\n *\n * All functions to be loaded must already be registered with lunr.Pipeline.\n * If any function from the serialised data has not been registered then an\n * error will be thrown.\n *\n * @param {Object} serialised - The serialised pipeline to load.\n * @returns {lunr.Pipeline}\n */\nlunr.Pipeline.load = function (serialised) {\n  var pipeline = new lunr.Pipeline\n\n  serialised.forEach(function (fnName) {\n    var fn = lunr.Pipeline.registeredFunctions[fnName]\n\n    if (fn) {\n      pipeline.add(fn)\n    } else {\n      throw new Error('Cannot load unregistered function: ' + fnName)\n    }\n  })\n\n  return pipeline\n}\n\n/**\n * Adds new functions to the end of the pipeline.\n *\n * Logs a warning if the function has not been registered.\n *\n * @param {lunr.PipelineFunction[]} functions - Any number of functions to add to the pipeline.\n */\nlunr.Pipeline.prototype.add = function () {\n  var fns = Array.prototype.slice.call(arguments)\n\n  fns.forEach(function (fn) {\n    lunr.Pipeline.warnIfFunctionNotRegistered(fn)\n    this._stack.push(fn)\n  }, this)\n}\n\n/**\n * Adds a single function after a function that already exists in the\n * pipeline.\n *\n * Logs a warning if the function has not been registered.\n *\n * @param {lunr.PipelineFunction} existingFn - A function that already exists in the pipeline.\n * @param {lunr.PipelineFunction} newFn - The new function to add to the pipeline.\n */\nlunr.Pipeline.prototype.after = function (existingFn, newFn) {\n  lunr.Pipeline.warnIfFunctionNotRegistered(newFn)\n\n  var pos = this._stack.indexOf(existingFn)\n  if (pos == -1) {\n    throw new Error('Cannot find existingFn')\n  }\n\n  pos = pos + 1\n  this._stack.splice(pos, 0, newFn)\n}\n\n/**\n * Adds a single function before a function that already exists in the\n * pipeline.\n *\n * Logs a warning if the function has not been registered.\n *\n * @param {lunr.PipelineFunction} existingFn - A function that already exists in the pipeline.\n * @param {lunr.PipelineFunction} newFn - The new function to add to the pipeline.\n */\nlunr.Pipeline.prototype.before = function (existingFn, newFn) {\n  lunr.Pipeline.warnIfFunctionNotRegistered(newFn)\n\n  var pos = this._stack.indexOf(existingFn)\n  if (pos == -1) {\n    throw new Error('Cannot find existingFn')\n  }\n\n  this._stack.splice(pos, 0, newFn)\n}\n\n/**\n * Removes a function from the pipeline.\n *\n * @param {lunr.PipelineFunction} fn The function to remove from the pipeline.\n */\nlunr.Pipeline.prototype.remove = function (fn) {\n  var pos = this._stack.indexOf(fn)\n  if (pos == -1) {\n    return\n  }\n\n  this._stack.splice(pos, 1)\n}\n\n/**\n * Runs the current list of functions that make up the pipeline against the\n * passed tokens.\n *\n * @param {Array} tokens The tokens to run through the pipeline.\n * @returns {Array}\n */\nlunr.Pipeline.prototype.run = function (tokens) {\n  var stackLength = this._stack.length\n\n  for (var i = 0; i < stackLength; i++) {\n    var fn = this._stack[i]\n    var memo = []\n\n    for (var j = 0; j < tokens.length; j++) {\n      var result = fn(tokens[j], j, tokens)\n\n      if (result === null || result === void 0 || result === '') continue\n\n      if (Array.isArray(result)) {\n        for (var k = 0; k < result.length; k++) {\n          memo.push(result[k])\n        }\n      } else {\n        memo.push(result)\n      }\n    }\n\n    tokens = memo\n  }\n\n  return tokens\n}\n\n/**\n * Convenience method for passing a string through a pipeline and getting\n * strings out. This method takes care of wrapping the passed string in a\n * token and mapping the resulting tokens back to strings.\n *\n * @param {string} str - The string to pass through the pipeline.\n * @param {?object} metadata - Optional metadata to associate with the token\n * passed to the pipeline.\n * @returns {string[]}\n */\nlunr.Pipeline.prototype.runString = function (str, metadata) {\n  var token = new lunr.Token (str, metadata)\n\n  return this.run([token]).map(function (t) {\n    return t.toString()\n  })\n}\n\n/**\n * Resets the pipeline by removing any existing processors.\n *\n */\nlunr.Pipeline.prototype.reset = function () {\n  this._stack = []\n}\n\n/**\n * Returns a representation of the pipeline ready for serialisation.\n *\n * Logs a warning if the function has not been registered.\n *\n * @returns {Array}\n */\nlunr.Pipeline.prototype.toJSON = function () {\n  return this._stack.map(function (fn) {\n    lunr.Pipeline.warnIfFunctionNotRegistered(fn)\n\n    return fn.label\n  })\n}\n/*!\n * lunr.Vector\n * Copyright (C) 2020 Oliver Nightingale\n */\n\n/**\n * A vector is used to construct the vector space of documents and queries. These\n * vectors support operations to determine the similarity between two documents or\n * a document and a query.\n *\n * Normally no parameters are required for initializing a vector, but in the case of\n * loading a previously dumped vector the raw elements can be provided to the constructor.\n *\n * For performance reasons vectors are implemented with a flat array, where an elements\n * index is immediately followed by its value. E.g. [index, value, index, value]. This\n * allows the underlying array to be as sparse as possible and still offer decent\n * performance when being used for vector calculations.\n *\n * @constructor\n * @param {Number[]} [elements] - The flat list of element index and element value pairs.\n */\nlunr.Vector = function (elements) {\n  this._magnitude = 0\n  this.elements = elements || []\n}\n\n\n/**\n * Calculates the position within the vector to insert a given index.\n *\n * This is used internally by insert and upsert. If there are duplicate indexes then\n * the position is returned as if the value for that index were to be updated, but it\n * is the callers responsibility to check whether there is a duplicate at that index\n *\n * @param {Number} insertIdx - The index at which the element should be inserted.\n * @returns {Number}\n */\nlunr.Vector.prototype.positionForIndex = function (index) {\n  // For an empty vector the tuple can be inserted at the beginning\n  if (this.elements.length == 0) {\n    return 0\n  }\n\n  var start = 0,\n      end = this.elements.length / 2,\n      sliceLength = end - start,\n      pivotPoint = Math.floor(sliceLength / 2),\n      pivotIndex = this.elements[pivotPoint * 2]\n\n  while (sliceLength > 1) {\n    if (pivotIndex < index) {\n      start = pivotPoint\n    }\n\n    if (pivotIndex > index) {\n      end = pivotPoint\n    }\n\n    if (pivotIndex == index) {\n      break\n    }\n\n    sliceLength = end - start\n    pivotPoint = start + Math.floor(sliceLength / 2)\n    pivotIndex = this.elements[pivotPoint * 2]\n  }\n\n  if (pivotIndex == index) {\n    return pivotPoint * 2\n  }\n\n  if (pivotIndex > index) {\n    return pivotPoint * 2\n  }\n\n  if (pivotIndex < index) {\n    return (pivotPoint + 1) * 2\n  }\n}\n\n/**\n * Inserts an element at an index within the vector.\n *\n * Does not allow duplicates, will throw an error if there is already an entry\n * for this index.\n *\n * @param {Number} insertIdx - The index at which the element should be inserted.\n * @param {Number} val - The value to be inserted into the vector.\n */\nlunr.Vector.prototype.insert = function (insertIdx, val) {\n  this.upsert(insertIdx, val, function () {\n    throw \"duplicate index\"\n  })\n}\n\n/**\n * Inserts or updates an existing index within the vector.\n *\n * @param {Number} insertIdx - The index at which the element should be inserted.\n * @param {Number} val - The value to be inserted into the vector.\n * @param {function} fn - A function that is called for updates, the existing value and the\n * requested value are passed as arguments\n */\nlunr.Vector.prototype.upsert = function (insertIdx, val, fn) {\n  this._magnitude = 0\n  var position = this.positionForIndex(insertIdx)\n\n  if (this.elements[position] == insertIdx) {\n    this.elements[position + 1] = fn(this.elements[position + 1], val)\n  } else {\n    this.elements.splice(position, 0, insertIdx, val)\n  }\n}\n\n/**\n * Calculates the magnitude of this vector.\n *\n * @returns {Number}\n */\nlunr.Vector.prototype.magnitude = function () {\n  if (this._magnitude) return this._magnitude\n\n  var sumOfSquares = 0,\n      elementsLength = this.elements.length\n\n  for (var i = 1; i < elementsLength; i += 2) {\n    var val = this.elements[i]\n    sumOfSquares += val * val\n  }\n\n  return this._magnitude = Math.sqrt(sumOfSquares)\n}\n\n/**\n * Calculates the dot product of this vector and another vector.\n *\n * @param {lunr.Vector} otherVector - The vector to compute the dot product with.\n * @returns {Number}\n */\nlunr.Vector.prototype.dot = function (otherVector) {\n  var dotProduct = 0,\n      a = this.elements, b = otherVector.elements,\n      aLen = a.length, bLen = b.length,\n      aVal = 0, bVal = 0,\n      i = 0, j = 0\n\n  while (i < aLen && j < bLen) {\n    aVal = a[i], bVal = b[j]\n    if (aVal < bVal) {\n      i += 2\n    } else if (aVal > bVal) {\n      j += 2\n    } else if (aVal == bVal) {\n      dotProduct += a[i + 1] * b[j + 1]\n      i += 2\n      j += 2\n    }\n  }\n\n  return dotProduct\n}\n\n/**\n * Calculates the similarity between this vector and another vector.\n *\n * @param {lunr.Vector} otherVector - The other vector to calculate the\n * similarity with.\n * @returns {Number}\n */\nlunr.Vector.prototype.similarity = function (otherVector) {\n  return this.dot(otherVector) / this.magnitude() || 0\n}\n\n/**\n * Converts the vector to an array of the elements within the vector.\n *\n * @returns {Number[]}\n */\nlunr.Vector.prototype.toArray = function () {\n  var output = new Array (this.elements.length / 2)\n\n  for (var i = 1, j = 0; i < this.elements.length; i += 2, j++) {\n    output[j] = this.elements[i]\n  }\n\n  return output\n}\n\n/**\n * A JSON serializable representation of the vector.\n *\n * @returns {Number[]}\n */\nlunr.Vector.prototype.toJSON = function () {\n  return this.elements\n}\n/* eslint-disable */\n/*!\n * lunr.stemmer\n * Copyright (C) 2020 Oliver Nightingale\n * Includes code from - http://tartarus.org/~martin/PorterStemmer/js.txt\n */\n\n/**\n * lunr.stemmer is an english language stemmer, this is a JavaScript\n * implementation of the PorterStemmer taken from http://tartarus.org/~martin\n *\n * @static\n * @implements {lunr.PipelineFunction}\n * @param {lunr.Token} token - The string to stem\n * @returns {lunr.Token}\n * @see {@link lunr.Pipeline}\n * @function\n */\nlunr.stemmer = (function(){\n  var step2list = {\n      \"ational\" : \"ate\",\n      \"tional\" : \"tion\",\n      \"enci\" : \"ence\",\n      \"anci\" : \"ance\",\n      \"izer\" : \"ize\",\n      \"bli\" : \"ble\",\n      \"alli\" : \"al\",\n      \"entli\" : \"ent\",\n      \"eli\" : \"e\",\n      \"ousli\" : \"ous\",\n      \"ization\" : \"ize\",\n      \"ation\" : \"ate\",\n      \"ator\" : \"ate\",\n      \"alism\" : \"al\",\n      \"iveness\" : \"ive\",\n      \"fulness\" : \"ful\",\n      \"ousness\" : \"ous\",\n      \"aliti\" : \"al\",\n      \"iviti\" : \"ive\",\n      \"biliti\" : \"ble\",\n      \"logi\" : \"log\"\n    },\n\n    step3list = {\n      \"icate\" : \"ic\",\n      \"ative\" : \"\",\n      \"alize\" : \"al\",\n      \"iciti\" : \"ic\",\n      \"ical\" : \"ic\",\n      \"ful\" : \"\",\n      \"ness\" : \"\"\n    },\n\n    c = \"[^aeiou]\",          // consonant\n    v = \"[aeiouy]\",          // vowel\n    C = c + \"[^aeiouy]*\",    // consonant sequence\n    V = v + \"[aeiou]*\",      // vowel sequence\n\n    mgr0 = \"^(\" + C + \")?\" + V + C,               // [C]VC... is m>0\n    meq1 = \"^(\" + C + \")?\" + V + C + \"(\" + V + \")?$\",  // [C]VC[V] is m=1\n    mgr1 = \"^(\" + C + \")?\" + V + C + V + C,       // [C]VCVC... is m>1\n    s_v = \"^(\" + C + \")?\" + v;                   // vowel in stem\n\n  var re_mgr0 = new RegExp(mgr0);\n  var re_mgr1 = new RegExp(mgr1);\n  var re_meq1 = new RegExp(meq1);\n  var re_s_v = new RegExp(s_v);\n\n  var re_1a = /^(.+?)(ss|i)es$/;\n  var re2_1a = /^(.+?)([^s])s$/;\n  var re_1b = /^(.+?)eed$/;\n  var re2_1b = /^(.+?)(ed|ing)$/;\n  var re_1b_2 = /.$/;\n  var re2_1b_2 = /(at|bl|iz)$/;\n  var re3_1b_2 = new RegExp(\"([^aeiouylsz])\\\\1$\");\n  var re4_1b_2 = new RegExp(\"^\" + C + v + \"[^aeiouwxy]$\");\n\n  var re_1c = /^(.+?[^aeiou])y$/;\n  var re_2 = /^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/;\n\n  var re_3 = /^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/;\n\n  var re_4 = /^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/;\n  var re2_4 = /^(.+?)(s|t)(ion)$/;\n\n  var re_5 = /^(.+?)e$/;\n  var re_5_1 = /ll$/;\n  var re3_5 = new RegExp(\"^\" + C + v + \"[^aeiouwxy]$\");\n\n  var porterStemmer = function porterStemmer(w) {\n    var stem,\n      suffix,\n      firstch,\n      re,\n      re2,\n      re3,\n      re4;\n\n    if (w.length < 3) { return w; }\n\n    firstch = w.substr(0,1);\n    if (firstch == \"y\") {\n      w = firstch.toUpperCase() + w.substr(1);\n    }\n\n    // Step 1a\n    re = re_1a\n    re2 = re2_1a;\n\n    if (re.test(w)) { w = w.replace(re,\"$1$2\"); }\n    else if (re2.test(w)) { w = w.replace(re2,\"$1$2\"); }\n\n    // Step 1b\n    re = re_1b;\n    re2 = re2_1b;\n    if (re.test(w)) {\n      var fp = re.exec(w);\n      re = re_mgr0;\n      if (re.test(fp[1])) {\n        re = re_1b_2;\n        w = w.replace(re,\"\");\n      }\n    } else if (re2.test(w)) {\n      var fp = re2.exec(w);\n      stem = fp[1];\n      re2 = re_s_v;\n      if (re2.test(stem)) {\n        w = stem;\n        re2 = re2_1b_2;\n        re3 = re3_1b_2;\n        re4 = re4_1b_2;\n        if (re2.test(w)) { w = w + \"e\"; }\n        else if (re3.test(w)) { re = re_1b_2; w = w.replace(re,\"\"); }\n        else if (re4.test(w)) { w = w + \"e\"; }\n      }\n    }\n\n    // Step 1c - replace suffix y or Y by i if preceded by a non-vowel which is not the first letter of the word (so cry -> cri, by -> by, say -> say)\n    re = re_1c;\n    if (re.test(w)) {\n      var fp = re.exec(w);\n      stem = fp[1];\n      w = stem + \"i\";\n    }\n\n    // Step 2\n    re = re_2;\n    if (re.test(w)) {\n      var fp = re.exec(w);\n      stem = fp[1];\n      suffix = fp[2];\n      re = re_mgr0;\n      if (re.test(stem)) {\n        w = stem + step2list[suffix];\n      }\n    }\n\n    // Step 3\n    re = re_3;\n    if (re.test(w)) {\n      var fp = re.exec(w);\n      stem = fp[1];\n      suffix = fp[2];\n      re = re_mgr0;\n      if (re.test(stem)) {\n        w = stem + step3list[suffix];\n      }\n    }\n\n    // Step 4\n    re = re_4;\n    re2 = re2_4;\n    if (re.test(w)) {\n      var fp = re.exec(w);\n      stem = fp[1];\n      re = re_mgr1;\n      if (re.test(stem)) {\n        w = stem;\n      }\n    } else if (re2.test(w)) {\n      var fp = re2.exec(w);\n      stem = fp[1] + fp[2];\n      re2 = re_mgr1;\n      if (re2.test(stem)) {\n        w = stem;\n      }\n    }\n\n    // Step 5\n    re = re_5;\n    if (re.test(w)) {\n      var fp = re.exec(w);\n      stem = fp[1];\n      re = re_mgr1;\n      re2 = re_meq1;\n      re3 = re3_5;\n      if (re.test(stem) || (re2.test(stem) && !(re3.test(stem)))) {\n        w = stem;\n      }\n    }\n\n    re = re_5_1;\n    re2 = re_mgr1;\n    if (re.test(w) && re2.test(w)) {\n      re = re_1b_2;\n      w = w.replace(re,\"\");\n    }\n\n    // and turn initial Y back to y\n\n    if (firstch == \"y\") {\n      w = firstch.toLowerCase() + w.substr(1);\n    }\n\n    return w;\n  };\n\n  return function (token) {\n    return token.update(porterStemmer);\n  }\n})();\n\nlunr.Pipeline.registerFunction(lunr.stemmer, 'stemmer')\n/*!\n * lunr.stopWordFilter\n * Copyright (C) 2020 Oliver Nightingale\n */\n\n/**\n * lunr.generateStopWordFilter builds a stopWordFilter function from the provided\n * list of stop words.\n *\n * The built in lunr.stopWordFilter is built using this generator and can be used\n * to generate custom stopWordFilters for applications or non English languages.\n *\n * @function\n * @param {Array} token The token to pass through the filter\n * @returns {lunr.PipelineFunction}\n * @see lunr.Pipeline\n * @see lunr.stopWordFilter\n */\nlunr.generateStopWordFilter = function (stopWords) {\n  var words = stopWords.reduce(function (memo, stopWord) {\n    memo[stopWord] = stopWord\n    return memo\n  }, {})\n\n  return function (token) {\n    if (token && words[token.toString()] !== token.toString()) return token\n  }\n}\n\n/**\n * lunr.stopWordFilter is an English language stop word list filter, any words\n * contained in the list will not be passed through the filter.\n *\n * This is intended to be used in the Pipeline. If the token does not pass the\n * filter then undefined will be returned.\n *\n * @function\n * @implements {lunr.PipelineFunction}\n * @params {lunr.Token} token - A token to check for being a stop word.\n * @returns {lunr.Token}\n * @see {@link lunr.Pipeline}\n */\nlunr.stopWordFilter = lunr.generateStopWordFilter([\n  'a',\n  'able',\n  'about',\n  'across',\n  'after',\n  'all',\n  'almost',\n  'also',\n  'am',\n  'among',\n  'an',\n  'and',\n  'any',\n  'are',\n  'as',\n  'at',\n  'be',\n  'because',\n  'been',\n  'but',\n  'by',\n  'can',\n  'cannot',\n  'could',\n  'dear',\n  'did',\n  'do',\n  'does',\n  'either',\n  'else',\n  'ever',\n  'every',\n  'for',\n  'from',\n  'get',\n  'got',\n  'had',\n  'has',\n  'have',\n  'he',\n  'her',\n  'hers',\n  'him',\n  'his',\n  'how',\n  'however',\n  'i',\n  'if',\n  'in',\n  'into',\n  'is',\n  'it',\n  'its',\n  'just',\n  'least',\n  'let',\n  'like',\n  'likely',\n  'may',\n  'me',\n  'might',\n  'most',\n  'must',\n  'my',\n  'neither',\n  'no',\n  'nor',\n  'not',\n  'of',\n  'off',\n  'often',\n  'on',\n  'only',\n  'or',\n  'other',\n  'our',\n  'own',\n  'rather',\n  'said',\n  'say',\n  'says',\n  'she',\n  'should',\n  'since',\n  'so',\n  'some',\n  'than',\n  'that',\n  'the',\n  'their',\n  'them',\n  'then',\n  'there',\n  'these',\n  'they',\n  'this',\n  'tis',\n  'to',\n  'too',\n  'twas',\n  'us',\n  'wants',\n  'was',\n  'we',\n  'were',\n  'what',\n  'when',\n  'where',\n  'which',\n  'while',\n  'who',\n  'whom',\n  'why',\n  'will',\n  'with',\n  'would',\n  'yet',\n  'you',\n  'your'\n])\n\nlunr.Pipeline.registerFunction(lunr.stopWordFilter, 'stopWordFilter')\n/*!\n * lunr.trimmer\n * Copyright (C) 2020 Oliver Nightingale\n */\n\n/**\n * lunr.trimmer is a pipeline function for trimming non word\n * characters from the beginning and end of tokens before they\n * enter the index.\n *\n * This implementation may not work correctly for non latin\n * characters and should either be removed or adapted for use\n * with languages with non-latin characters.\n *\n * @static\n * @implements {lunr.PipelineFunction}\n * @param {lunr.Token} token The token to pass through the filter\n * @returns {lunr.Token}\n * @see lunr.Pipeline\n */\nlunr.trimmer = function (token) {\n  return token.update(function (s) {\n    return s.replace(/^\\W+/, '').replace(/\\W+$/, '')\n  })\n}\n\nlunr.Pipeline.registerFunction(lunr.trimmer, 'trimmer')\n/*!\n * lunr.TokenSet\n * Copyright (C) 2020 Oliver Nightingale\n */\n\n/**\n * A token set is used to store the unique list of all tokens\n * within an index. Token sets are also used to represent an\n * incoming query to the index, this query token set and index\n * token set are then intersected to find which tokens to look\n * up in the inverted index.\n *\n * A token set can hold multiple tokens, as in the case of the\n * index token set, or it can hold a single token as in the\n * case of a simple query token set.\n *\n * Additionally token sets are used to perform wildcard matching.\n * Leading, contained and trailing wildcards are supported, and\n * from this edit distance matching can also be provided.\n *\n * Token sets are implemented as a minimal finite state automata,\n * where both common prefixes and suffixes are shared between tokens.\n * This helps to reduce the space used for storing the token set.\n *\n * @constructor\n */\nlunr.TokenSet = function () {\n  this.final = false\n  this.edges = {}\n  this.id = lunr.TokenSet._nextId\n  lunr.TokenSet._nextId += 1\n}\n\n/**\n * Keeps track of the next, auto increment, identifier to assign\n * to a new tokenSet.\n *\n * TokenSets require a unique identifier to be correctly minimised.\n *\n * @private\n */\nlunr.TokenSet._nextId = 1\n\n/**\n * Creates a TokenSet instance from the given sorted array of words.\n *\n * @param {String[]} arr - A sorted array of strings to create the set from.\n * @returns {lunr.TokenSet}\n * @throws Will throw an error if the input array is not sorted.\n */\nlunr.TokenSet.fromArray = function (arr) {\n  var builder = new lunr.TokenSet.Builder\n\n  for (var i = 0, len = arr.length; i < len; i++) {\n    builder.insert(arr[i])\n  }\n\n  builder.finish()\n  return builder.root\n}\n\n/**\n * Creates a token set from a query clause.\n *\n * @private\n * @param {Object} clause - A single clause from lunr.Query.\n * @param {string} clause.term - The query clause term.\n * @param {number} [clause.editDistance] - The optional edit distance for the term.\n * @returns {lunr.TokenSet}\n */\nlunr.TokenSet.fromClause = function (clause) {\n  if ('editDistance' in clause) {\n    return lunr.TokenSet.fromFuzzyString(clause.term, clause.editDistance)\n  } else {\n    return lunr.TokenSet.fromString(clause.term)\n  }\n}\n\n/**\n * Creates a token set representing a single string with a specified\n * edit distance.\n *\n * Insertions, deletions, substitutions and transpositions are each\n * treated as an edit distance of 1.\n *\n * Increasing the allowed edit distance will have a dramatic impact\n * on the performance of both creating and intersecting these TokenSets.\n * It is advised to keep the edit distance less than 3.\n *\n * @param {string} str - The string to create the token set from.\n * @param {number} editDistance - The allowed edit distance to match.\n * @returns {lunr.Vector}\n */\nlunr.TokenSet.fromFuzzyString = function (str, editDistance) {\n  var root = new lunr.TokenSet\n\n  var stack = [{\n    node: root,\n    editsRemaining: editDistance,\n    str: str\n  }]\n\n  while (stack.length) {\n    var frame = stack.pop()\n\n    // no edit\n    if (frame.str.length > 0) {\n      var char = frame.str.charAt(0),\n          noEditNode\n\n      if (char in frame.node.edges) {\n        noEditNode = frame.node.edges[char]\n      } else {\n        noEditNode = new lunr.TokenSet\n        frame.node.edges[char] = noEditNode\n      }\n\n      if (frame.str.length == 1) {\n        noEditNode.final = true\n      }\n\n      stack.push({\n        node: noEditNode,\n        editsRemaining: frame.editsRemaining,\n        str: frame.str.slice(1)\n      })\n    }\n\n    if (frame.editsRemaining == 0) {\n      continue\n    }\n\n    // insertion\n    if (\"*\" in frame.node.edges) {\n      var insertionNode = frame.node.edges[\"*\"]\n    } else {\n      var insertionNode = new lunr.TokenSet\n      frame.node.edges[\"*\"] = insertionNode\n    }\n\n    if (frame.str.length == 0) {\n      insertionNode.final = true\n    }\n\n    stack.push({\n      node: insertionNode,\n      editsRemaining: frame.editsRemaining - 1,\n      str: frame.str\n    })\n\n    // deletion\n    // can only do a deletion if we have enough edits remaining\n    // and if there are characters left to delete in the string\n    if (frame.str.length > 1) {\n      stack.push({\n        node: frame.node,\n        editsRemaining: frame.editsRemaining - 1,\n        str: frame.str.slice(1)\n      })\n    }\n\n    // deletion\n    // just removing the last character from the str\n    if (frame.str.length == 1) {\n      frame.node.final = true\n    }\n\n    // substitution\n    // can only do a substitution if we have enough edits remaining\n    // and if there are characters left to substitute\n    if (frame.str.length >= 1) {\n      if (\"*\" in frame.node.edges) {\n        var substitutionNode = frame.node.edges[\"*\"]\n      } else {\n        var substitutionNode = new lunr.TokenSet\n        frame.node.edges[\"*\"] = substitutionNode\n      }\n\n      if (frame.str.length == 1) {\n        substitutionNode.final = true\n      }\n\n      stack.push({\n        node: substitutionNode,\n        editsRemaining: frame.editsRemaining - 1,\n        str: frame.str.slice(1)\n      })\n    }\n\n    // transposition\n    // can only do a transposition if there are edits remaining\n    // and there are enough characters to transpose\n    if (frame.str.length > 1) {\n      var charA = frame.str.charAt(0),\n          charB = frame.str.charAt(1),\n          transposeNode\n\n      if (charB in frame.node.edges) {\n        transposeNode = frame.node.edges[charB]\n      } else {\n        transposeNode = new lunr.TokenSet\n        frame.node.edges[charB] = transposeNode\n      }\n\n      if (frame.str.length == 1) {\n        transposeNode.final = true\n      }\n\n      stack.push({\n        node: transposeNode,\n        editsRemaining: frame.editsRemaining - 1,\n        str: charA + frame.str.slice(2)\n      })\n    }\n  }\n\n  return root\n}\n\n/**\n * Creates a TokenSet from a string.\n *\n * The string may contain one or more wildcard characters (*)\n * that will allow wildcard matching when intersecting with\n * another TokenSet.\n *\n * @param {string} str - The string to create a TokenSet from.\n * @returns {lunr.TokenSet}\n */\nlunr.TokenSet.fromString = function (str) {\n  var node = new lunr.TokenSet,\n      root = node\n\n  /*\n   * Iterates through all characters within the passed string\n   * appending a node for each character.\n   *\n   * When a wildcard character is found then a self\n   * referencing edge is introduced to continually match\n   * any number of any characters.\n   */\n  for (var i = 0, len = str.length; i < len; i++) {\n    var char = str[i],\n        final = (i == len - 1)\n\n    if (char == \"*\") {\n      node.edges[char] = node\n      node.final = final\n\n    } else {\n      var next = new lunr.TokenSet\n      next.final = final\n\n      node.edges[char] = next\n      node = next\n    }\n  }\n\n  return root\n}\n\n/**\n * Converts this TokenSet into an array of strings\n * contained within the TokenSet.\n *\n * This is not intended to be used on a TokenSet that\n * contains wildcards, in these cases the results are\n * undefined and are likely to cause an infinite loop.\n *\n * @returns {string[]}\n */\nlunr.TokenSet.prototype.toArray = function () {\n  var words = []\n\n  var stack = [{\n    prefix: \"\",\n    node: this\n  }]\n\n  while (stack.length) {\n    var frame = stack.pop(),\n        edges = Object.keys(frame.node.edges),\n        len = edges.length\n\n    if (frame.node.final) {\n      /* In Safari, at this point the prefix is sometimes corrupted, see:\n       * https://github.com/olivernn/lunr.js/issues/279 Calling any\n       * String.prototype method forces Safari to \"cast\" this string to what\n       * it's supposed to be, fixing the bug. */\n      frame.prefix.charAt(0)\n      words.push(frame.prefix)\n    }\n\n    for (var i = 0; i < len; i++) {\n      var edge = edges[i]\n\n      stack.push({\n        prefix: frame.prefix.concat(edge),\n        node: frame.node.edges[edge]\n      })\n    }\n  }\n\n  return words\n}\n\n/**\n * Generates a string representation of a TokenSet.\n *\n * This is intended to allow TokenSets to be used as keys\n * in objects, largely to aid the construction and minimisation\n * of a TokenSet. As such it is not designed to be a human\n * friendly representation of the TokenSet.\n *\n * @returns {string}\n */\nlunr.TokenSet.prototype.toString = function () {\n  // NOTE: Using Object.keys here as this.edges is very likely\n  // to enter 'hash-mode' with many keys being added\n  //\n  // avoiding a for-in loop here as it leads to the function\n  // being de-optimised (at least in V8). From some simple\n  // benchmarks the performance is comparable, but allowing\n  // V8 to optimize may mean easy performance wins in the future.\n\n  if (this._str) {\n    return this._str\n  }\n\n  var str = this.final ? '1' : '0',\n      labels = Object.keys(this.edges).sort(),\n      len = labels.length\n\n  for (var i = 0; i < len; i++) {\n    var label = labels[i],\n        node = this.edges[label]\n\n    str = str + label + node.id\n  }\n\n  return str\n}\n\n/**\n * Returns a new TokenSet that is the intersection of\n * this TokenSet and the passed TokenSet.\n *\n * This intersection will take into account any wildcards\n * contained within the TokenSet.\n *\n * @param {lunr.TokenSet} b - An other TokenSet to intersect with.\n * @returns {lunr.TokenSet}\n */\nlunr.TokenSet.prototype.intersect = function (b) {\n  var output = new lunr.TokenSet,\n      frame = undefined\n\n  var stack = [{\n    qNode: b,\n    output: output,\n    node: this\n  }]\n\n  while (stack.length) {\n    frame = stack.pop()\n\n    // NOTE: As with the #toString method, we are using\n    // Object.keys and a for loop instead of a for-in loop\n    // as both of these objects enter 'hash' mode, causing\n    // the function to be de-optimised in V8\n    var qEdges = Object.keys(frame.qNode.edges),\n        qLen = qEdges.length,\n        nEdges = Object.keys(frame.node.edges),\n        nLen = nEdges.length\n\n    for (var q = 0; q < qLen; q++) {\n      var qEdge = qEdges[q]\n\n      for (var n = 0; n < nLen; n++) {\n        var nEdge = nEdges[n]\n\n        if (nEdge == qEdge || qEdge == '*') {\n          var node = frame.node.edges[nEdge],\n              qNode = frame.qNode.edges[qEdge],\n              final = node.final && qNode.final,\n              next = undefined\n\n          if (nEdge in frame.output.edges) {\n            // an edge already exists for this character\n            // no need to create a new node, just set the finality\n            // bit unless this node is already final\n            next = frame.output.edges[nEdge]\n            next.final = next.final || final\n\n          } else {\n            // no edge exists yet, must create one\n            // set the finality bit and insert it\n            // into the output\n            next = new lunr.TokenSet\n            next.final = final\n            frame.output.edges[nEdge] = next\n          }\n\n          stack.push({\n            qNode: qNode,\n            output: next,\n            node: node\n          })\n        }\n      }\n    }\n  }\n\n  return output\n}\nlunr.TokenSet.Builder = function () {\n  this.previousWord = \"\"\n  this.root = new lunr.TokenSet\n  this.uncheckedNodes = []\n  this.minimizedNodes = {}\n}\n\nlunr.TokenSet.Builder.prototype.insert = function (word) {\n  var node,\n      commonPrefix = 0\n\n  if (word < this.previousWord) {\n    throw new Error (\"Out of order word insertion\")\n  }\n\n  for (var i = 0; i < word.length && i < this.previousWord.length; i++) {\n    if (word[i] != this.previousWord[i]) break\n    commonPrefix++\n  }\n\n  this.minimize(commonPrefix)\n\n  if (this.uncheckedNodes.length == 0) {\n    node = this.root\n  } else {\n    node = this.uncheckedNodes[this.uncheckedNodes.length - 1].child\n  }\n\n  for (var i = commonPrefix; i < word.length; i++) {\n    var nextNode = new lunr.TokenSet,\n        char = word[i]\n\n    node.edges[char] = nextNode\n\n    this.uncheckedNodes.push({\n      parent: node,\n      char: char,\n      child: nextNode\n    })\n\n    node = nextNode\n  }\n\n  node.final = true\n  this.previousWord = word\n}\n\nlunr.TokenSet.Builder.prototype.finish = function () {\n  this.minimize(0)\n}\n\nlunr.TokenSet.Builder.prototype.minimize = function (downTo) {\n  for (var i = this.uncheckedNodes.length - 1; i >= downTo; i--) {\n    var node = this.uncheckedNodes[i],\n        childKey = node.child.toString()\n\n    if (childKey in this.minimizedNodes) {\n      node.parent.edges[node.char] = this.minimizedNodes[childKey]\n    } else {\n      // Cache the key for this node since\n      // we know it can't change anymore\n      node.child._str = childKey\n\n      this.minimizedNodes[childKey] = node.child\n    }\n\n    this.uncheckedNodes.pop()\n  }\n}\n/*!\n * lunr.Index\n * Copyright (C) 2020 Oliver Nightingale\n */\n\n/**\n * An index contains the built index of all documents and provides a query interface\n * to the index.\n *\n * Usually instances of lunr.Index will not be created using this constructor, instead\n * lunr.Builder should be used to construct new indexes, or lunr.Index.load should be\n * used to load previously built and serialized indexes.\n *\n * @constructor\n * @param {Object} attrs - The attributes of the built search index.\n * @param {Object} attrs.invertedIndex - An index of term/field to document reference.\n * @param {Object<string, lunr.Vector>} attrs.fieldVectors - Field vectors\n * @param {lunr.TokenSet} attrs.tokenSet - An set of all corpus tokens.\n * @param {string[]} attrs.fields - The names of indexed document fields.\n * @param {lunr.Pipeline} attrs.pipeline - The pipeline to use for search terms.\n */\nlunr.Index = function (attrs) {\n  this.invertedIndex = attrs.invertedIndex\n  this.fieldVectors = attrs.fieldVectors\n  this.tokenSet = attrs.tokenSet\n  this.fields = attrs.fields\n  this.pipeline = attrs.pipeline\n}\n\n/**\n * A result contains details of a document matching a search query.\n * @typedef {Object} lunr.Index~Result\n * @property {string} ref - The reference of the document this result represents.\n * @property {number} score - A number between 0 and 1 representing how similar this document is to the query.\n * @property {lunr.MatchData} matchData - Contains metadata about this match including which term(s) caused the match.\n */\n\n/**\n * Although lunr provides the ability to create queries using lunr.Query, it also provides a simple\n * query language which itself is parsed into an instance of lunr.Query.\n *\n * For programmatically building queries it is advised to directly use lunr.Query, the query language\n * is best used for human entered text rather than program generated text.\n *\n * At its simplest queries can just be a single term, e.g. `hello`, multiple terms are also supported\n * and will be combined with OR, e.g `hello world` will match documents that contain either 'hello'\n * or 'world', though those that contain both will rank higher in the results.\n *\n * Wildcards can be included in terms to match one or more unspecified characters, these wildcards can\n * be inserted anywhere within the term, and more than one wildcard can exist in a single term. Adding\n * wildcards will increase the number of documents that will be found but can also have a negative\n * impact on query performance, especially with wildcards at the beginning of a term.\n *\n * Terms can be restricted to specific fields, e.g. `title:hello`, only documents with the term\n * hello in the title field will match this query. Using a field not present in the index will lead\n * to an error being thrown.\n *\n * Modifiers can also be added to terms, lunr supports edit distance and boost modifiers on terms. A term\n * boost will make documents matching that term score higher, e.g. `foo^5`. Edit distance is also supported\n * to provide fuzzy matching, e.g. 'hello~2' will match documents with hello with an edit distance of 2.\n * Avoid large values for edit distance to improve query performance.\n *\n * Each term also supports a presence modifier. By default a term's presence in document is optional, however\n * this can be changed to either required or prohibited. For a term's presence to be required in a document the\n * term should be prefixed with a '+', e.g. `+foo bar` is a search for documents that must contain 'foo' and\n * optionally contain 'bar'. Conversely a leading '-' sets the terms presence to prohibited, i.e. it must not\n * appear in a document, e.g. `-foo bar` is a search for documents that do not contain 'foo' but may contain 'bar'.\n *\n * To escape special characters the backslash character '\\' can be used, this allows searches to include\n * characters that would normally be considered modifiers, e.g. `foo\\~2` will search for a term \"foo~2\" instead\n * of attempting to apply a boost of 2 to the search term \"foo\".\n *\n * @typedef {string} lunr.Index~QueryString\n * @example <caption>Simple single term query</caption>\n * hello\n * @example <caption>Multiple term query</caption>\n * hello world\n * @example <caption>term scoped to a field</caption>\n * title:hello\n * @example <caption>term with a boost of 10</caption>\n * hello^10\n * @example <caption>term with an edit distance of 2</caption>\n * hello~2\n * @example <caption>terms with presence modifiers</caption>\n * -foo +bar baz\n */\n\n/**\n * Performs a search against the index using lunr query syntax.\n *\n * Results will be returned sorted by their score, the most relevant results\n * will be returned first.  For details on how the score is calculated, please see\n * the {@link https://lunrjs.com/guides/searching.html#scoring|guide}.\n *\n * For more programmatic querying use lunr.Index#query.\n *\n * @param {lunr.Index~QueryString} queryString - A string containing a lunr query.\n * @throws {lunr.QueryParseError} If the passed query string cannot be parsed.\n * @returns {lunr.Index~Result[]}\n */\nlunr.Index.prototype.search = function (queryString) {\n  return this.query(function (query) {\n    var parser = new lunr.QueryParser(queryString, query)\n    parser.parse()\n  })\n}\n\n/**\n * A query builder callback provides a query object to be used to express\n * the query to perform on the index.\n *\n * @callback lunr.Index~queryBuilder\n * @param {lunr.Query} query - The query object to build up.\n * @this lunr.Query\n */\n\n/**\n * Performs a query against the index using the yielded lunr.Query object.\n *\n * If performing programmatic queries against the index, this method is preferred\n * over lunr.Index#search so as to avoid the additional query parsing overhead.\n *\n * A query object is yielded to the supplied function which should be used to\n * express the query to be run against the index.\n *\n * Note that although this function takes a callback parameter it is _not_ an\n * asynchronous operation, the callback is just yielded a query object to be\n * customized.\n *\n * @param {lunr.Index~queryBuilder} fn - A function that is used to build the query.\n * @returns {lunr.Index~Result[]}\n */\nlunr.Index.prototype.query = function (fn) {\n  // for each query clause\n  // * process terms\n  // * expand terms from token set\n  // * find matching documents and metadata\n  // * get document vectors\n  // * score documents\n\n  var query = new lunr.Query(this.fields),\n      matchingFields = Object.create(null),\n      queryVectors = Object.create(null),\n      termFieldCache = Object.create(null),\n      requiredMatches = Object.create(null),\n      prohibitedMatches = Object.create(null)\n\n  /*\n   * To support field level boosts a query vector is created per\n   * field. An empty vector is eagerly created to support negated\n   * queries.\n   */\n  for (var i = 0; i < this.fields.length; i++) {\n    queryVectors[this.fields[i]] = new lunr.Vector\n  }\n\n  fn.call(query, query)\n\n  for (var i = 0; i < query.clauses.length; i++) {\n    /*\n     * Unless the pipeline has been disabled for this term, which is\n     * the case for terms with wildcards, we need to pass the clause\n     * term through the search pipeline. A pipeline returns an array\n     * of processed terms. Pipeline functions may expand the passed\n     * term, which means we may end up performing multiple index lookups\n     * for a single query term.\n     */\n    var clause = query.clauses[i],\n        terms = null,\n        clauseMatches = lunr.Set.empty\n\n    if (clause.usePipeline) {\n      terms = this.pipeline.runString(clause.term, {\n        fields: clause.fields\n      })\n    } else {\n      terms = [clause.term]\n    }\n\n    for (var m = 0; m < terms.length; m++) {\n      var term = terms[m]\n\n      /*\n       * Each term returned from the pipeline needs to use the same query\n       * clause object, e.g. the same boost and or edit distance. The\n       * simplest way to do this is to re-use the clause object but mutate\n       * its term property.\n       */\n      clause.term = term\n\n      /*\n       * From the term in the clause we create a token set which will then\n       * be used to intersect the indexes token set to get a list of terms\n       * to lookup in the inverted index\n       */\n      var termTokenSet = lunr.TokenSet.fromClause(clause),\n          expandedTerms = this.tokenSet.intersect(termTokenSet).toArray()\n\n      /*\n       * If a term marked as required does not exist in the tokenSet it is\n       * impossible for the search to return any matches. We set all the field\n       * scoped required matches set to empty and stop examining any further\n       * clauses.\n       */\n      if (expandedTerms.length === 0 && clause.presence === lunr.Query.presence.REQUIRED) {\n        for (var k = 0; k < clause.fields.length; k++) {\n          var field = clause.fields[k]\n          requiredMatches[field] = lunr.Set.empty\n        }\n\n        break\n      }\n\n      for (var j = 0; j < expandedTerms.length; j++) {\n        /*\n         * For each term get the posting and termIndex, this is required for\n         * building the query vector.\n         */\n        var expandedTerm = expandedTerms[j],\n            posting = this.invertedIndex[expandedTerm],\n            termIndex = posting._index\n\n        for (var k = 0; k < clause.fields.length; k++) {\n          /*\n           * For each field that this query term is scoped by (by default\n           * all fields are in scope) we need to get all the document refs\n           * that have this term in that field.\n           *\n           * The posting is the entry in the invertedIndex for the matching\n           * term from above.\n           */\n          var field = clause.fields[k],\n              fieldPosting = posting[field],\n              matchingDocumentRefs = Object.keys(fieldPosting),\n              termField = expandedTerm + \"/\" + field,\n              matchingDocumentsSet = new lunr.Set(matchingDocumentRefs)\n\n          /*\n           * if the presence of this term is required ensure that the matching\n           * documents are added to the set of required matches for this clause.\n           *\n           */\n          if (clause.presence == lunr.Query.presence.REQUIRED) {\n            clauseMatches = clauseMatches.union(matchingDocumentsSet)\n\n            if (requiredMatches[field] === undefined) {\n              requiredMatches[field] = lunr.Set.complete\n            }\n          }\n\n          /*\n           * if the presence of this term is prohibited ensure that the matching\n           * documents are added to the set of prohibited matches for this field,\n           * creating that set if it does not yet exist.\n           */\n          if (clause.presence == lunr.Query.presence.PROHIBITED) {\n            if (prohibitedMatches[field] === undefined) {\n              prohibitedMatches[field] = lunr.Set.empty\n            }\n\n            prohibitedMatches[field] = prohibitedMatches[field].union(matchingDocumentsSet)\n\n            /*\n             * Prohibited matches should not be part of the query vector used for\n             * similarity scoring and no metadata should be extracted so we continue\n             * to the next field\n             */\n            continue\n          }\n\n          /*\n           * The query field vector is populated using the termIndex found for\n           * the term and a unit value with the appropriate boost applied.\n           * Using upsert because there could already be an entry in the vector\n           * for the term we are working with. In that case we just add the scores\n           * together.\n           */\n          queryVectors[field].upsert(termIndex, clause.boost, function (a, b) { return a + b })\n\n          /**\n           * If we've already seen this term, field combo then we've already collected\n           * the matching documents and metadata, no need to go through all that again\n           */\n          if (termFieldCache[termField]) {\n            continue\n          }\n\n          for (var l = 0; l < matchingDocumentRefs.length; l++) {\n            /*\n             * All metadata for this term/field/document triple\n             * are then extracted and collected into an instance\n             * of lunr.MatchData ready to be returned in the query\n             * results\n             */\n            var matchingDocumentRef = matchingDocumentRefs[l],\n                matchingFieldRef = new lunr.FieldRef (matchingDocumentRef, field),\n                metadata = fieldPosting[matchingDocumentRef],\n                fieldMatch\n\n            if ((fieldMatch = matchingFields[matchingFieldRef]) === undefined) {\n              matchingFields[matchingFieldRef] = new lunr.MatchData (expandedTerm, field, metadata)\n            } else {\n              fieldMatch.add(expandedTerm, field, metadata)\n            }\n\n          }\n\n          termFieldCache[termField] = true\n        }\n      }\n    }\n\n    /**\n     * If the presence was required we need to update the requiredMatches field sets.\n     * We do this after all fields for the term have collected their matches because\n     * the clause terms presence is required in _any_ of the fields not _all_ of the\n     * fields.\n     */\n    if (clause.presence === lunr.Query.presence.REQUIRED) {\n      for (var k = 0; k < clause.fields.length; k++) {\n        var field = clause.fields[k]\n        requiredMatches[field] = requiredMatches[field].intersect(clauseMatches)\n      }\n    }\n  }\n\n  /**\n   * Need to combine the field scoped required and prohibited\n   * matching documents into a global set of required and prohibited\n   * matches\n   */\n  var allRequiredMatches = lunr.Set.complete,\n      allProhibitedMatches = lunr.Set.empty\n\n  for (var i = 0; i < this.fields.length; i++) {\n    var field = this.fields[i]\n\n    if (requiredMatches[field]) {\n      allRequiredMatches = allRequiredMatches.intersect(requiredMatches[field])\n    }\n\n    if (prohibitedMatches[field]) {\n      allProhibitedMatches = allProhibitedMatches.union(prohibitedMatches[field])\n    }\n  }\n\n  var matchingFieldRefs = Object.keys(matchingFields),\n      results = [],\n      matches = Object.create(null)\n\n  /*\n   * If the query is negated (contains only prohibited terms)\n   * we need to get _all_ fieldRefs currently existing in the\n   * index. This is only done when we know that the query is\n   * entirely prohibited terms to avoid any cost of getting all\n   * fieldRefs unnecessarily.\n   *\n   * Additionally, blank MatchData must be created to correctly\n   * populate the results.\n   */\n  if (query.isNegated()) {\n    matchingFieldRefs = Object.keys(this.fieldVectors)\n\n    for (var i = 0; i < matchingFieldRefs.length; i++) {\n      var matchingFieldRef = matchingFieldRefs[i]\n      var fieldRef = lunr.FieldRef.fromString(matchingFieldRef)\n      matchingFields[matchingFieldRef] = new lunr.MatchData\n    }\n  }\n\n  for (var i = 0; i < matchingFieldRefs.length; i++) {\n    /*\n     * Currently we have document fields that match the query, but we\n     * need to return documents. The matchData and scores are combined\n     * from multiple fields belonging to the same document.\n     *\n     * Scores are calculated by field, using the query vectors created\n     * above, and combined into a final document score using addition.\n     */\n    var fieldRef = lunr.FieldRef.fromString(matchingFieldRefs[i]),\n        docRef = fieldRef.docRef\n\n    if (!allRequiredMatches.contains(docRef)) {\n      continue\n    }\n\n    if (allProhibitedMatches.contains(docRef)) {\n      continue\n    }\n\n    var fieldVector = this.fieldVectors[fieldRef],\n        score = queryVectors[fieldRef.fieldName].similarity(fieldVector),\n        docMatch\n\n    if ((docMatch = matches[docRef]) !== undefined) {\n      docMatch.score += score\n      docMatch.matchData.combine(matchingFields[fieldRef])\n    } else {\n      var match = {\n        ref: docRef,\n        score: score,\n        matchData: matchingFields[fieldRef]\n      }\n      matches[docRef] = match\n      results.push(match)\n    }\n  }\n\n  /*\n   * Sort the results objects by score, highest first.\n   */\n  return results.sort(function (a, b) {\n    return b.score - a.score\n  })\n}\n\n/**\n * Prepares the index for JSON serialization.\n *\n * The schema for this JSON blob will be described in a\n * separate JSON schema file.\n *\n * @returns {Object}\n */\nlunr.Index.prototype.toJSON = function () {\n  var invertedIndex = Object.keys(this.invertedIndex)\n    .sort()\n    .map(function (term) {\n      return [term, this.invertedIndex[term]]\n    }, this)\n\n  var fieldVectors = Object.keys(this.fieldVectors)\n    .map(function (ref) {\n      return [ref, this.fieldVectors[ref].toJSON()]\n    }, this)\n\n  return {\n    version: lunr.version,\n    fields: this.fields,\n    fieldVectors: fieldVectors,\n    invertedIndex: invertedIndex,\n    pipeline: this.pipeline.toJSON()\n  }\n}\n\n/**\n * Loads a previously serialized lunr.Index\n *\n * @param {Object} serializedIndex - A previously serialized lunr.Index\n * @returns {lunr.Index}\n */\nlunr.Index.load = function (serializedIndex) {\n  var attrs = {},\n      fieldVectors = {},\n      serializedVectors = serializedIndex.fieldVectors,\n      invertedIndex = Object.create(null),\n      serializedInvertedIndex = serializedIndex.invertedIndex,\n      tokenSetBuilder = new lunr.TokenSet.Builder,\n      pipeline = lunr.Pipeline.load(serializedIndex.pipeline)\n\n  if (serializedIndex.version != lunr.version) {\n    lunr.utils.warn(\"Version mismatch when loading serialised index. Current version of lunr '\" + lunr.version + \"' does not match serialized index '\" + serializedIndex.version + \"'\")\n  }\n\n  for (var i = 0; i < serializedVectors.length; i++) {\n    var tuple = serializedVectors[i],\n        ref = tuple[0],\n        elements = tuple[1]\n\n    fieldVectors[ref] = new lunr.Vector(elements)\n  }\n\n  for (var i = 0; i < serializedInvertedIndex.length; i++) {\n    var tuple = serializedInvertedIndex[i],\n        term = tuple[0],\n        posting = tuple[1]\n\n    tokenSetBuilder.insert(term)\n    invertedIndex[term] = posting\n  }\n\n  tokenSetBuilder.finish()\n\n  attrs.fields = serializedIndex.fields\n\n  attrs.fieldVectors = fieldVectors\n  attrs.invertedIndex = invertedIndex\n  attrs.tokenSet = tokenSetBuilder.root\n  attrs.pipeline = pipeline\n\n  return new lunr.Index(attrs)\n}\n/*!\n * lunr.Builder\n * Copyright (C) 2020 Oliver Nightingale\n */\n\n/**\n * lunr.Builder performs indexing on a set of documents and\n * returns instances of lunr.Index ready for querying.\n *\n * All configuration of the index is done via the builder, the\n * fields to index, the document reference, the text processing\n * pipeline and document scoring parameters are all set on the\n * builder before indexing.\n *\n * @constructor\n * @property {string} _ref - Internal reference to the document reference field.\n * @property {string[]} _fields - Internal reference to the document fields to index.\n * @property {object} invertedIndex - The inverted index maps terms to document fields.\n * @property {object} documentTermFrequencies - Keeps track of document term frequencies.\n * @property {object} documentLengths - Keeps track of the length of documents added to the index.\n * @property {lunr.tokenizer} tokenizer - Function for splitting strings into tokens for indexing.\n * @property {lunr.Pipeline} pipeline - The pipeline performs text processing on tokens before indexing.\n * @property {lunr.Pipeline} searchPipeline - A pipeline for processing search terms before querying the index.\n * @property {number} documentCount - Keeps track of the total number of documents indexed.\n * @property {number} _b - A parameter to control field length normalization, setting this to 0 disabled normalization, 1 fully normalizes field lengths, the default value is 0.75.\n * @property {number} _k1 - A parameter to control how quickly an increase in term frequency results in term frequency saturation, the default value is 1.2.\n * @property {number} termIndex - A counter incremented for each unique term, used to identify a terms position in the vector space.\n * @property {array} metadataWhitelist - A list of metadata keys that have been whitelisted for entry in the index.\n */\nlunr.Builder = function () {\n  this._ref = \"id\"\n  this._fields = Object.create(null)\n  this._documents = Object.create(null)\n  this.invertedIndex = Object.create(null)\n  this.fieldTermFrequencies = {}\n  this.fieldLengths = {}\n  this.tokenizer = lunr.tokenizer\n  this.pipeline = new lunr.Pipeline\n  this.searchPipeline = new lunr.Pipeline\n  this.documentCount = 0\n  this._b = 0.75\n  this._k1 = 1.2\n  this.termIndex = 0\n  this.metadataWhitelist = []\n}\n\n/**\n * Sets the document field used as the document reference. Every document must have this field.\n * The type of this field in the document should be a string, if it is not a string it will be\n * coerced into a string by calling toString.\n *\n * The default ref is 'id'.\n *\n * The ref should _not_ be changed during indexing, it should be set before any documents are\n * added to the index. Changing it during indexing can lead to inconsistent results.\n *\n * @param {string} ref - The name of the reference field in the document.\n */\nlunr.Builder.prototype.ref = function (ref) {\n  this._ref = ref\n}\n\n/**\n * A function that is used to extract a field from a document.\n *\n * Lunr expects a field to be at the top level of a document, if however the field\n * is deeply nested within a document an extractor function can be used to extract\n * the right field for indexing.\n *\n * @callback fieldExtractor\n * @param {object} doc - The document being added to the index.\n * @returns {?(string|object|object[])} obj - The object that will be indexed for this field.\n * @example <caption>Extracting a nested field</caption>\n * function (doc) { return doc.nested.field }\n */\n\n/**\n * Adds a field to the list of document fields that will be indexed. Every document being\n * indexed should have this field. Null values for this field in indexed documents will\n * not cause errors but will limit the chance of that document being retrieved by searches.\n *\n * All fields should be added before adding documents to the index. Adding fields after\n * a document has been indexed will have no effect on already indexed documents.\n *\n * Fields can be boosted at build time. This allows terms within that field to have more\n * importance when ranking search results. Use a field boost to specify that matches within\n * one field are more important than other fields.\n *\n * @param {string} fieldName - The name of a field to index in all documents.\n * @param {object} attributes - Optional attributes associated with this field.\n * @param {number} [attributes.boost=1] - Boost applied to all terms within this field.\n * @param {fieldExtractor} [attributes.extractor] - Function to extract a field from a document.\n * @throws {RangeError} fieldName cannot contain unsupported characters '/'\n */\nlunr.Builder.prototype.field = function (fieldName, attributes) {\n  if (/\\//.test(fieldName)) {\n    throw new RangeError (\"Field '\" + fieldName + \"' contains illegal character '/'\")\n  }\n\n  this._fields[fieldName] = attributes || {}\n}\n\n/**\n * A parameter to tune the amount of field length normalisation that is applied when\n * calculating relevance scores. A value of 0 will completely disable any normalisation\n * and a value of 1 will fully normalise field lengths. The default is 0.75. Values of b\n * will be clamped to the range 0 - 1.\n *\n * @param {number} number - The value to set for this tuning parameter.\n */\nlunr.Builder.prototype.b = function (number) {\n  if (number < 0) {\n    this._b = 0\n  } else if (number > 1) {\n    this._b = 1\n  } else {\n    this._b = number\n  }\n}\n\n/**\n * A parameter that controls the speed at which a rise in term frequency results in term\n * frequency saturation. The default value is 1.2. Setting this to a higher value will give\n * slower saturation levels, a lower value will result in quicker saturation.\n *\n * @param {number} number - The value to set for this tuning parameter.\n */\nlunr.Builder.prototype.k1 = function (number) {\n  this._k1 = number\n}\n\n/**\n * Adds a document to the index.\n *\n * Before adding fields to the index the index should have been fully setup, with the document\n * ref and all fields to index already having been specified.\n *\n * The document must have a field name as specified by the ref (by default this is 'id') and\n * it should have all fields defined for indexing, though null or undefined values will not\n * cause errors.\n *\n * Entire documents can be boosted at build time. Applying a boost to a document indicates that\n * this document should rank higher in search results than other documents.\n *\n * @param {object} doc - The document to add to the index.\n * @param {object} attributes - Optional attributes associated with this document.\n * @param {number} [attributes.boost=1] - Boost applied to all terms within this document.\n */\nlunr.Builder.prototype.add = function (doc, attributes) {\n  var docRef = doc[this._ref],\n      fields = Object.keys(this._fields)\n\n  this._documents[docRef] = attributes || {}\n  this.documentCount += 1\n\n  for (var i = 0; i < fields.length; i++) {\n    var fieldName = fields[i],\n        extractor = this._fields[fieldName].extractor,\n        field = extractor ? extractor(doc) : doc[fieldName],\n        tokens = this.tokenizer(field, {\n          fields: [fieldName]\n        }),\n        terms = this.pipeline.run(tokens),\n        fieldRef = new lunr.FieldRef (docRef, fieldName),\n        fieldTerms = Object.create(null)\n\n    this.fieldTermFrequencies[fieldRef] = fieldTerms\n    this.fieldLengths[fieldRef] = 0\n\n    // store the length of this field for this document\n    this.fieldLengths[fieldRef] += terms.length\n\n    // calculate term frequencies for this field\n    for (var j = 0; j < terms.length; j++) {\n      var term = terms[j]\n\n      if (fieldTerms[term] == undefined) {\n        fieldTerms[term] = 0\n      }\n\n      fieldTerms[term] += 1\n\n      // add to inverted index\n      // create an initial posting if one doesn't exist\n      if (this.invertedIndex[term] == undefined) {\n        var posting = Object.create(null)\n        posting[\"_index\"] = this.termIndex\n        this.termIndex += 1\n\n        for (var k = 0; k < fields.length; k++) {\n          posting[fields[k]] = Object.create(null)\n        }\n\n        this.invertedIndex[term] = posting\n      }\n\n      // add an entry for this term/fieldName/docRef to the invertedIndex\n      if (this.invertedIndex[term][fieldName][docRef] == undefined) {\n        this.invertedIndex[term][fieldName][docRef] = Object.create(null)\n      }\n\n      // store all whitelisted metadata about this token in the\n      // inverted index\n      for (var l = 0; l < this.metadataWhitelist.length; l++) {\n        var metadataKey = this.metadataWhitelist[l],\n            metadata = term.metadata[metadataKey]\n\n        if (this.invertedIndex[term][fieldName][docRef][metadataKey] == undefined) {\n          this.invertedIndex[term][fieldName][docRef][metadataKey] = []\n        }\n\n        this.invertedIndex[term][fieldName][docRef][metadataKey].push(metadata)\n      }\n    }\n\n  }\n}\n\n/**\n * Calculates the average document length for this index\n *\n * @private\n */\nlunr.Builder.prototype.calculateAverageFieldLengths = function () {\n\n  var fieldRefs = Object.keys(this.fieldLengths),\n      numberOfFields = fieldRefs.length,\n      accumulator = {},\n      documentsWithField = {}\n\n  for (var i = 0; i < numberOfFields; i++) {\n    var fieldRef = lunr.FieldRef.fromString(fieldRefs[i]),\n        field = fieldRef.fieldName\n\n    documentsWithField[field] || (documentsWithField[field] = 0)\n    documentsWithField[field] += 1\n\n    accumulator[field] || (accumulator[field] = 0)\n    accumulator[field] += this.fieldLengths[fieldRef]\n  }\n\n  var fields = Object.keys(this._fields)\n\n  for (var i = 0; i < fields.length; i++) {\n    var fieldName = fields[i]\n    accumulator[fieldName] = accumulator[fieldName] / documentsWithField[fieldName]\n  }\n\n  this.averageFieldLength = accumulator\n}\n\n/**\n * Builds a vector space model of every document using lunr.Vector\n *\n * @private\n */\nlunr.Builder.prototype.createFieldVectors = function () {\n  var fieldVectors = {},\n      fieldRefs = Object.keys(this.fieldTermFrequencies),\n      fieldRefsLength = fieldRefs.length,\n      termIdfCache = Object.create(null)\n\n  for (var i = 0; i < fieldRefsLength; i++) {\n    var fieldRef = lunr.FieldRef.fromString(fieldRefs[i]),\n        fieldName = fieldRef.fieldName,\n        fieldLength = this.fieldLengths[fieldRef],\n        fieldVector = new lunr.Vector,\n        termFrequencies = this.fieldTermFrequencies[fieldRef],\n        terms = Object.keys(termFrequencies),\n        termsLength = terms.length\n\n\n    var fieldBoost = this._fields[fieldName].boost || 1,\n        docBoost = this._documents[fieldRef.docRef].boost || 1\n\n    for (var j = 0; j < termsLength; j++) {\n      var term = terms[j],\n          tf = termFrequencies[term],\n          termIndex = this.invertedIndex[term]._index,\n          idf, score, scoreWithPrecision\n\n      if (termIdfCache[term] === undefined) {\n        idf = lunr.idf(this.invertedIndex[term], this.documentCount)\n        termIdfCache[term] = idf\n      } else {\n        idf = termIdfCache[term]\n      }\n\n      score = idf * ((this._k1 + 1) * tf) / (this._k1 * (1 - this._b + this._b * (fieldLength / this.averageFieldLength[fieldName])) + tf)\n      score *= fieldBoost\n      score *= docBoost\n      scoreWithPrecision = Math.round(score * 1000) / 1000\n      // Converts 1.23456789 to 1.234.\n      // Reducing the precision so that the vectors take up less\n      // space when serialised. Doing it now so that they behave\n      // the same before and after serialisation. Also, this is\n      // the fastest approach to reducing a number's precision in\n      // JavaScript.\n\n      fieldVector.insert(termIndex, scoreWithPrecision)\n    }\n\n    fieldVectors[fieldRef] = fieldVector\n  }\n\n  this.fieldVectors = fieldVectors\n}\n\n/**\n * Creates a token set of all tokens in the index using lunr.TokenSet\n *\n * @private\n */\nlunr.Builder.prototype.createTokenSet = function () {\n  this.tokenSet = lunr.TokenSet.fromArray(\n    Object.keys(this.invertedIndex).sort()\n  )\n}\n\n/**\n * Builds the index, creating an instance of lunr.Index.\n *\n * This completes the indexing process and should only be called\n * once all documents have been added to the index.\n *\n * @returns {lunr.Index}\n */\nlunr.Builder.prototype.build = function () {\n  this.calculateAverageFieldLengths()\n  this.createFieldVectors()\n  this.createTokenSet()\n\n  return new lunr.Index({\n    invertedIndex: this.invertedIndex,\n    fieldVectors: this.fieldVectors,\n    tokenSet: this.tokenSet,\n    fields: Object.keys(this._fields),\n    pipeline: this.searchPipeline\n  })\n}\n\n/**\n * Applies a plugin to the index builder.\n *\n * A plugin is a function that is called with the index builder as its context.\n * Plugins can be used to customise or extend the behaviour of the index\n * in some way. A plugin is just a function, that encapsulated the custom\n * behaviour that should be applied when building the index.\n *\n * The plugin function will be called with the index builder as its argument, additional\n * arguments can also be passed when calling use. The function will be called\n * with the index builder as its context.\n *\n * @param {Function} plugin The plugin to apply.\n */\nlunr.Builder.prototype.use = function (fn) {\n  var args = Array.prototype.slice.call(arguments, 1)\n  args.unshift(this)\n  fn.apply(this, args)\n}\n/**\n * Contains and collects metadata about a matching document.\n * A single instance of lunr.MatchData is returned as part of every\n * lunr.Index~Result.\n *\n * @constructor\n * @param {string} term - The term this match data is associated with\n * @param {string} field - The field in which the term was found\n * @param {object} metadata - The metadata recorded about this term in this field\n * @property {object} metadata - A cloned collection of metadata associated with this document.\n * @see {@link lunr.Index~Result}\n */\nlunr.MatchData = function (term, field, metadata) {\n  var clonedMetadata = Object.create(null),\n      metadataKeys = Object.keys(metadata || {})\n\n  // Cloning the metadata to prevent the original\n  // being mutated during match data combination.\n  // Metadata is kept in an array within the inverted\n  // index so cloning the data can be done with\n  // Array#slice\n  for (var i = 0; i < metadataKeys.length; i++) {\n    var key = metadataKeys[i]\n    clonedMetadata[key] = metadata[key].slice()\n  }\n\n  this.metadata = Object.create(null)\n\n  if (term !== undefined) {\n    this.metadata[term] = Object.create(null)\n    this.metadata[term][field] = clonedMetadata\n  }\n}\n\n/**\n * An instance of lunr.MatchData will be created for every term that matches a\n * document. However only one instance is required in a lunr.Index~Result. This\n * method combines metadata from another instance of lunr.MatchData with this\n * objects metadata.\n *\n * @param {lunr.MatchData} otherMatchData - Another instance of match data to merge with this one.\n * @see {@link lunr.Index~Result}\n */\nlunr.MatchData.prototype.combine = function (otherMatchData) {\n  var terms = Object.keys(otherMatchData.metadata)\n\n  for (var i = 0; i < terms.length; i++) {\n    var term = terms[i],\n        fields = Object.keys(otherMatchData.metadata[term])\n\n    if (this.metadata[term] == undefined) {\n      this.metadata[term] = Object.create(null)\n    }\n\n    for (var j = 0; j < fields.length; j++) {\n      var field = fields[j],\n          keys = Object.keys(otherMatchData.metadata[term][field])\n\n      if (this.metadata[term][field] == undefined) {\n        this.metadata[term][field] = Object.create(null)\n      }\n\n      for (var k = 0; k < keys.length; k++) {\n        var key = keys[k]\n\n        if (this.metadata[term][field][key] == undefined) {\n          this.metadata[term][field][key] = otherMatchData.metadata[term][field][key]\n        } else {\n          this.metadata[term][field][key] = this.metadata[term][field][key].concat(otherMatchData.metadata[term][field][key])\n        }\n\n      }\n    }\n  }\n}\n\n/**\n * Add metadata for a term/field pair to this instance of match data.\n *\n * @param {string} term - The term this match data is associated with\n * @param {string} field - The field in which the term was found\n * @param {object} metadata - The metadata recorded about this term in this field\n */\nlunr.MatchData.prototype.add = function (term, field, metadata) {\n  if (!(term in this.metadata)) {\n    this.metadata[term] = Object.create(null)\n    this.metadata[term][field] = metadata\n    return\n  }\n\n  if (!(field in this.metadata[term])) {\n    this.metadata[term][field] = metadata\n    return\n  }\n\n  var metadataKeys = Object.keys(metadata)\n\n  for (var i = 0; i < metadataKeys.length; i++) {\n    var key = metadataKeys[i]\n\n    if (key in this.metadata[term][field]) {\n      this.metadata[term][field][key] = this.metadata[term][field][key].concat(metadata[key])\n    } else {\n      this.metadata[term][field][key] = metadata[key]\n    }\n  }\n}\n/**\n * A lunr.Query provides a programmatic way of defining queries to be performed\n * against a {@link lunr.Index}.\n *\n * Prefer constructing a lunr.Query using the {@link lunr.Index#query} method\n * so the query object is pre-initialized with the right index fields.\n *\n * @constructor\n * @property {lunr.Query~Clause[]} clauses - An array of query clauses.\n * @property {string[]} allFields - An array of all available fields in a lunr.Index.\n */\nlunr.Query = function (allFields) {\n  this.clauses = []\n  this.allFields = allFields\n}\n\n/**\n * Constants for indicating what kind of automatic wildcard insertion will be used when constructing a query clause.\n *\n * This allows wildcards to be added to the beginning and end of a term without having to manually do any string\n * concatenation.\n *\n * The wildcard constants can be bitwise combined to select both leading and trailing wildcards.\n *\n * @constant\n * @default\n * @property {number} wildcard.NONE - The term will have no wildcards inserted, this is the default behaviour\n * @property {number} wildcard.LEADING - Prepend the term with a wildcard, unless a leading wildcard already exists\n * @property {number} wildcard.TRAILING - Append a wildcard to the term, unless a trailing wildcard already exists\n * @see lunr.Query~Clause\n * @see lunr.Query#clause\n * @see lunr.Query#term\n * @example <caption>query term with trailing wildcard</caption>\n * query.term('foo', { wildcard: lunr.Query.wildcard.TRAILING })\n * @example <caption>query term with leading and trailing wildcard</caption>\n * query.term('foo', {\n *   wildcard: lunr.Query.wildcard.LEADING | lunr.Query.wildcard.TRAILING\n * })\n */\n\nlunr.Query.wildcard = new String (\"*\")\nlunr.Query.wildcard.NONE = 0\nlunr.Query.wildcard.LEADING = 1\nlunr.Query.wildcard.TRAILING = 2\n\n/**\n * Constants for indicating what kind of presence a term must have in matching documents.\n *\n * @constant\n * @enum {number}\n * @see lunr.Query~Clause\n * @see lunr.Query#clause\n * @see lunr.Query#term\n * @example <caption>query term with required presence</caption>\n * query.term('foo', { presence: lunr.Query.presence.REQUIRED })\n */\nlunr.Query.presence = {\n  /**\n   * Term's presence in a document is optional, this is the default value.\n   */\n  OPTIONAL: 1,\n\n  /**\n   * Term's presence in a document is required, documents that do not contain\n   * this term will not be returned.\n   */\n  REQUIRED: 2,\n\n  /**\n   * Term's presence in a document is prohibited, documents that do contain\n   * this term will not be returned.\n   */\n  PROHIBITED: 3\n}\n\n/**\n * A single clause in a {@link lunr.Query} contains a term and details on how to\n * match that term against a {@link lunr.Index}.\n *\n * @typedef {Object} lunr.Query~Clause\n * @property {string[]} fields - The fields in an index this clause should be matched against.\n * @property {number} [boost=1] - Any boost that should be applied when matching this clause.\n * @property {number} [editDistance] - Whether the term should have fuzzy matching applied, and how fuzzy the match should be.\n * @property {boolean} [usePipeline] - Whether the term should be passed through the search pipeline.\n * @property {number} [wildcard=lunr.Query.wildcard.NONE] - Whether the term should have wildcards appended or prepended.\n * @property {number} [presence=lunr.Query.presence.OPTIONAL] - The terms presence in any matching documents.\n */\n\n/**\n * Adds a {@link lunr.Query~Clause} to this query.\n *\n * Unless the clause contains the fields to be matched all fields will be matched. In addition\n * a default boost of 1 is applied to the clause.\n *\n * @param {lunr.Query~Clause} clause - The clause to add to this query.\n * @see lunr.Query~Clause\n * @returns {lunr.Query}\n */\nlunr.Query.prototype.clause = function (clause) {\n  if (!('fields' in clause)) {\n    clause.fields = this.allFields\n  }\n\n  if (!('boost' in clause)) {\n    clause.boost = 1\n  }\n\n  if (!('usePipeline' in clause)) {\n    clause.usePipeline = true\n  }\n\n  if (!('wildcard' in clause)) {\n    clause.wildcard = lunr.Query.wildcard.NONE\n  }\n\n  if ((clause.wildcard & lunr.Query.wildcard.LEADING) && (clause.term.charAt(0) != lunr.Query.wildcard)) {\n    clause.term = \"*\" + clause.term\n  }\n\n  if ((clause.wildcard & lunr.Query.wildcard.TRAILING) && (clause.term.slice(-1) != lunr.Query.wildcard)) {\n    clause.term = \"\" + clause.term + \"*\"\n  }\n\n  if (!('presence' in clause)) {\n    clause.presence = lunr.Query.presence.OPTIONAL\n  }\n\n  this.clauses.push(clause)\n\n  return this\n}\n\n/**\n * A negated query is one in which every clause has a presence of\n * prohibited. These queries require some special processing to return\n * the expected results.\n *\n * @returns boolean\n */\nlunr.Query.prototype.isNegated = function () {\n  for (var i = 0; i < this.clauses.length; i++) {\n    if (this.clauses[i].presence != lunr.Query.presence.PROHIBITED) {\n      return false\n    }\n  }\n\n  return true\n}\n\n/**\n * Adds a term to the current query, under the covers this will create a {@link lunr.Query~Clause}\n * to the list of clauses that make up this query.\n *\n * The term is used as is, i.e. no tokenization will be performed by this method. Instead conversion\n * to a token or token-like string should be done before calling this method.\n *\n * The term will be converted to a string by calling `toString`. Multiple terms can be passed as an\n * array, each term in the array will share the same options.\n *\n * @param {object|object[]} term - The term(s) to add to the query.\n * @param {object} [options] - Any additional properties to add to the query clause.\n * @returns {lunr.Query}\n * @see lunr.Query#clause\n * @see lunr.Query~Clause\n * @example <caption>adding a single term to a query</caption>\n * query.term(\"foo\")\n * @example <caption>adding a single term to a query and specifying search fields, term boost and automatic trailing wildcard</caption>\n * query.term(\"foo\", {\n *   fields: [\"title\"],\n *   boost: 10,\n *   wildcard: lunr.Query.wildcard.TRAILING\n * })\n * @example <caption>using lunr.tokenizer to convert a string to tokens before using them as terms</caption>\n * query.term(lunr.tokenizer(\"foo bar\"))\n */\nlunr.Query.prototype.term = function (term, options) {\n  if (Array.isArray(term)) {\n    term.forEach(function (t) { this.term(t, lunr.utils.clone(options)) }, this)\n    return this\n  }\n\n  var clause = options || {}\n  clause.term = term.toString()\n\n  this.clause(clause)\n\n  return this\n}\nlunr.QueryParseError = function (message, start, end) {\n  this.name = \"QueryParseError\"\n  this.message = message\n  this.start = start\n  this.end = end\n}\n\nlunr.QueryParseError.prototype = new Error\nlunr.QueryLexer = function (str) {\n  this.lexemes = []\n  this.str = str\n  this.length = str.length\n  this.pos = 0\n  this.start = 0\n  this.escapeCharPositions = []\n}\n\nlunr.QueryLexer.prototype.run = function () {\n  var state = lunr.QueryLexer.lexText\n\n  while (state) {\n    state = state(this)\n  }\n}\n\nlunr.QueryLexer.prototype.sliceString = function () {\n  var subSlices = [],\n      sliceStart = this.start,\n      sliceEnd = this.pos\n\n  for (var i = 0; i < this.escapeCharPositions.length; i++) {\n    sliceEnd = this.escapeCharPositions[i]\n    subSlices.push(this.str.slice(sliceStart, sliceEnd))\n    sliceStart = sliceEnd + 1\n  }\n\n  subSlices.push(this.str.slice(sliceStart, this.pos))\n  this.escapeCharPositions.length = 0\n\n  return subSlices.join('')\n}\n\nlunr.QueryLexer.prototype.emit = function (type) {\n  this.lexemes.push({\n    type: type,\n    str: this.sliceString(),\n    start: this.start,\n    end: this.pos\n  })\n\n  this.start = this.pos\n}\n\nlunr.QueryLexer.prototype.escapeCharacter = function () {\n  this.escapeCharPositions.push(this.pos - 1)\n  this.pos += 1\n}\n\nlunr.QueryLexer.prototype.next = function () {\n  if (this.pos >= this.length) {\n    return lunr.QueryLexer.EOS\n  }\n\n  var char = this.str.charAt(this.pos)\n  this.pos += 1\n  return char\n}\n\nlunr.QueryLexer.prototype.width = function () {\n  return this.pos - this.start\n}\n\nlunr.QueryLexer.prototype.ignore = function () {\n  if (this.start == this.pos) {\n    this.pos += 1\n  }\n\n  this.start = this.pos\n}\n\nlunr.QueryLexer.prototype.backup = function () {\n  this.pos -= 1\n}\n\nlunr.QueryLexer.prototype.acceptDigitRun = function () {\n  var char, charCode\n\n  do {\n    char = this.next()\n    charCode = char.charCodeAt(0)\n  } while (charCode > 47 && charCode < 58)\n\n  if (char != lunr.QueryLexer.EOS) {\n    this.backup()\n  }\n}\n\nlunr.QueryLexer.prototype.more = function () {\n  return this.pos < this.length\n}\n\nlunr.QueryLexer.EOS = 'EOS'\nlunr.QueryLexer.FIELD = 'FIELD'\nlunr.QueryLexer.TERM = 'TERM'\nlunr.QueryLexer.EDIT_DISTANCE = 'EDIT_DISTANCE'\nlunr.QueryLexer.BOOST = 'BOOST'\nlunr.QueryLexer.PRESENCE = 'PRESENCE'\n\nlunr.QueryLexer.lexField = function (lexer) {\n  lexer.backup()\n  lexer.emit(lunr.QueryLexer.FIELD)\n  lexer.ignore()\n  return lunr.QueryLexer.lexText\n}\n\nlunr.QueryLexer.lexTerm = function (lexer) {\n  if (lexer.width() > 1) {\n    lexer.backup()\n    lexer.emit(lunr.QueryLexer.TERM)\n  }\n\n  lexer.ignore()\n\n  if (lexer.more()) {\n    return lunr.QueryLexer.lexText\n  }\n}\n\nlunr.QueryLexer.lexEditDistance = function (lexer) {\n  lexer.ignore()\n  lexer.acceptDigitRun()\n  lexer.emit(lunr.QueryLexer.EDIT_DISTANCE)\n  return lunr.QueryLexer.lexText\n}\n\nlunr.QueryLexer.lexBoost = function (lexer) {\n  lexer.ignore()\n  lexer.acceptDigitRun()\n  lexer.emit(lunr.QueryLexer.BOOST)\n  return lunr.QueryLexer.lexText\n}\n\nlunr.QueryLexer.lexEOS = function (lexer) {\n  if (lexer.width() > 0) {\n    lexer.emit(lunr.QueryLexer.TERM)\n  }\n}\n\n// This matches the separator used when tokenising fields\n// within a document. These should match otherwise it is\n// not possible to search for some tokens within a document.\n//\n// It is possible for the user to change the separator on the\n// tokenizer so it _might_ clash with any other of the special\n// characters already used within the search string, e.g. :.\n//\n// This means that it is possible to change the separator in\n// such a way that makes some words unsearchable using a search\n// string.\nlunr.QueryLexer.termSeparator = lunr.tokenizer.separator\n\nlunr.QueryLexer.lexText = function (lexer) {\n  while (true) {\n    var char = lexer.next()\n\n    if (char == lunr.QueryLexer.EOS) {\n      return lunr.QueryLexer.lexEOS\n    }\n\n    // Escape character is '\\'\n    if (char.charCodeAt(0) == 92) {\n      lexer.escapeCharacter()\n      continue\n    }\n\n    if (char == \":\") {\n      return lunr.QueryLexer.lexField\n    }\n\n    if (char == \"~\") {\n      lexer.backup()\n      if (lexer.width() > 0) {\n        lexer.emit(lunr.QueryLexer.TERM)\n      }\n      return lunr.QueryLexer.lexEditDistance\n    }\n\n    if (char == \"^\") {\n      lexer.backup()\n      if (lexer.width() > 0) {\n        lexer.emit(lunr.QueryLexer.TERM)\n      }\n      return lunr.QueryLexer.lexBoost\n    }\n\n    // \"+\" indicates term presence is required\n    // checking for length to ensure that only\n    // leading \"+\" are considered\n    if (char == \"+\" && lexer.width() === 1) {\n      lexer.emit(lunr.QueryLexer.PRESENCE)\n      return lunr.QueryLexer.lexText\n    }\n\n    // \"-\" indicates term presence is prohibited\n    // checking for length to ensure that only\n    // leading \"-\" are considered\n    if (char == \"-\" && lexer.width() === 1) {\n      lexer.emit(lunr.QueryLexer.PRESENCE)\n      return lunr.QueryLexer.lexText\n    }\n\n    if (char.match(lunr.QueryLexer.termSeparator)) {\n      return lunr.QueryLexer.lexTerm\n    }\n  }\n}\n\nlunr.QueryParser = function (str, query) {\n  this.lexer = new lunr.QueryLexer (str)\n  this.query = query\n  this.currentClause = {}\n  this.lexemeIdx = 0\n}\n\nlunr.QueryParser.prototype.parse = function () {\n  this.lexer.run()\n  this.lexemes = this.lexer.lexemes\n\n  var state = lunr.QueryParser.parseClause\n\n  while (state) {\n    state = state(this)\n  }\n\n  return this.query\n}\n\nlunr.QueryParser.prototype.peekLexeme = function () {\n  return this.lexemes[this.lexemeIdx]\n}\n\nlunr.QueryParser.prototype.consumeLexeme = function () {\n  var lexeme = this.peekLexeme()\n  this.lexemeIdx += 1\n  return lexeme\n}\n\nlunr.QueryParser.prototype.nextClause = function () {\n  var completedClause = this.currentClause\n  this.query.clause(completedClause)\n  this.currentClause = {}\n}\n\nlunr.QueryParser.parseClause = function (parser) {\n  var lexeme = parser.peekLexeme()\n\n  if (lexeme == undefined) {\n    return\n  }\n\n  switch (lexeme.type) {\n    case lunr.QueryLexer.PRESENCE:\n      return lunr.QueryParser.parsePresence\n    case lunr.QueryLexer.FIELD:\n      return lunr.QueryParser.parseField\n    case lunr.QueryLexer.TERM:\n      return lunr.QueryParser.parseTerm\n    default:\n      var errorMessage = \"expected either a field or a term, found \" + lexeme.type\n\n      if (lexeme.str.length >= 1) {\n        errorMessage += \" with value '\" + lexeme.str + \"'\"\n      }\n\n      throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)\n  }\n}\n\nlunr.QueryParser.parsePresence = function (parser) {\n  var lexeme = parser.consumeLexeme()\n\n  if (lexeme == undefined) {\n    return\n  }\n\n  switch (lexeme.str) {\n    case \"-\":\n      parser.currentClause.presence = lunr.Query.presence.PROHIBITED\n      break\n    case \"+\":\n      parser.currentClause.presence = lunr.Query.presence.REQUIRED\n      break\n    default:\n      var errorMessage = \"unrecognised presence operator'\" + lexeme.str + \"'\"\n      throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)\n  }\n\n  var nextLexeme = parser.peekLexeme()\n\n  if (nextLexeme == undefined) {\n    var errorMessage = \"expecting term or field, found nothing\"\n    throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)\n  }\n\n  switch (nextLexeme.type) {\n    case lunr.QueryLexer.FIELD:\n      return lunr.QueryParser.parseField\n    case lunr.QueryLexer.TERM:\n      return lunr.QueryParser.parseTerm\n    default:\n      var errorMessage = \"expecting term or field, found '\" + nextLexeme.type + \"'\"\n      throw new lunr.QueryParseError (errorMessage, nextLexeme.start, nextLexeme.end)\n  }\n}\n\nlunr.QueryParser.parseField = function (parser) {\n  var lexeme = parser.consumeLexeme()\n\n  if (lexeme == undefined) {\n    return\n  }\n\n  if (parser.query.allFields.indexOf(lexeme.str) == -1) {\n    var possibleFields = parser.query.allFields.map(function (f) { return \"'\" + f + \"'\" }).join(', '),\n        errorMessage = \"unrecognised field '\" + lexeme.str + \"', possible fields: \" + possibleFields\n\n    throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)\n  }\n\n  parser.currentClause.fields = [lexeme.str]\n\n  var nextLexeme = parser.peekLexeme()\n\n  if (nextLexeme == undefined) {\n    var errorMessage = \"expecting term, found nothing\"\n    throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)\n  }\n\n  switch (nextLexeme.type) {\n    case lunr.QueryLexer.TERM:\n      return lunr.QueryParser.parseTerm\n    default:\n      var errorMessage = \"expecting term, found '\" + nextLexeme.type + \"'\"\n      throw new lunr.QueryParseError (errorMessage, nextLexeme.start, nextLexeme.end)\n  }\n}\n\nlunr.QueryParser.parseTerm = function (parser) {\n  var lexeme = parser.consumeLexeme()\n\n  if (lexeme == undefined) {\n    return\n  }\n\n  parser.currentClause.term = lexeme.str.toLowerCase()\n\n  if (lexeme.str.indexOf(\"*\") != -1) {\n    parser.currentClause.usePipeline = false\n  }\n\n  var nextLexeme = parser.peekLexeme()\n\n  if (nextLexeme == undefined) {\n    parser.nextClause()\n    return\n  }\n\n  switch (nextLexeme.type) {\n    case lunr.QueryLexer.TERM:\n      parser.nextClause()\n      return lunr.QueryParser.parseTerm\n    case lunr.QueryLexer.FIELD:\n      parser.nextClause()\n      return lunr.QueryParser.parseField\n    case lunr.QueryLexer.EDIT_DISTANCE:\n      return lunr.QueryParser.parseEditDistance\n    case lunr.QueryLexer.BOOST:\n      return lunr.QueryParser.parseBoost\n    case lunr.QueryLexer.PRESENCE:\n      parser.nextClause()\n      return lunr.QueryParser.parsePresence\n    default:\n      var errorMessage = \"Unexpected lexeme type '\" + nextLexeme.type + \"'\"\n      throw new lunr.QueryParseError (errorMessage, nextLexeme.start, nextLexeme.end)\n  }\n}\n\nlunr.QueryParser.parseEditDistance = function (parser) {\n  var lexeme = parser.consumeLexeme()\n\n  if (lexeme == undefined) {\n    return\n  }\n\n  var editDistance = parseInt(lexeme.str, 10)\n\n  if (isNaN(editDistance)) {\n    var errorMessage = \"edit distance must be numeric\"\n    throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)\n  }\n\n  parser.currentClause.editDistance = editDistance\n\n  var nextLexeme = parser.peekLexeme()\n\n  if (nextLexeme == undefined) {\n    parser.nextClause()\n    return\n  }\n\n  switch (nextLexeme.type) {\n    case lunr.QueryLexer.TERM:\n      parser.nextClause()\n      return lunr.QueryParser.parseTerm\n    case lunr.QueryLexer.FIELD:\n      parser.nextClause()\n      return lunr.QueryParser.parseField\n    case lunr.QueryLexer.EDIT_DISTANCE:\n      return lunr.QueryParser.parseEditDistance\n    case lunr.QueryLexer.BOOST:\n      return lunr.QueryParser.parseBoost\n    case lunr.QueryLexer.PRESENCE:\n      parser.nextClause()\n      return lunr.QueryParser.parsePresence\n    default:\n      var errorMessage = \"Unexpected lexeme type '\" + nextLexeme.type + \"'\"\n      throw new lunr.QueryParseError (errorMessage, nextLexeme.start, nextLexeme.end)\n  }\n}\n\nlunr.QueryParser.parseBoost = function (parser) {\n  var lexeme = parser.consumeLexeme()\n\n  if (lexeme == undefined) {\n    return\n  }\n\n  var boost = parseInt(lexeme.str, 10)\n\n  if (isNaN(boost)) {\n    var errorMessage = \"boost must be numeric\"\n    throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)\n  }\n\n  parser.currentClause.boost = boost\n\n  var nextLexeme = parser.peekLexeme()\n\n  if (nextLexeme == undefined) {\n    parser.nextClause()\n    return\n  }\n\n  switch (nextLexeme.type) {\n    case lunr.QueryLexer.TERM:\n      parser.nextClause()\n      return lunr.QueryParser.parseTerm\n    case lunr.QueryLexer.FIELD:\n      parser.nextClause()\n      return lunr.QueryParser.parseField\n    case lunr.QueryLexer.EDIT_DISTANCE:\n      return lunr.QueryParser.parseEditDistance\n    case lunr.QueryLexer.BOOST:\n      return lunr.QueryParser.parseBoost\n    case lunr.QueryLexer.PRESENCE:\n      parser.nextClause()\n      return lunr.QueryParser.parsePresence\n    default:\n      var errorMessage = \"Unexpected lexeme type '\" + nextLexeme.type + \"'\"\n      throw new lunr.QueryParseError (errorMessage, nextLexeme.start, nextLexeme.end)\n  }\n}\n\n  /**\n   * export the module via AMD, CommonJS or as a browser global\n   * Export code from https://github.com/umdjs/umd/blob/master/returnExports.js\n   */\n  ;(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n      // AMD. Register as an anonymous module.\n      define(factory)\n    } else if (typeof exports === 'object') {\n      /**\n       * Node. Does not work with strict CommonJS, but\n       * only CommonJS-like enviroments that support module.exports,\n       * like Node.\n       */\n      module.exports = factory()\n    } else {\n      // Browser globals (root is window)\n      root.lunr = factory()\n    }\n  }(this, function () {\n    /**\n     * Just return a value to define the module export.\n     * This example returns an object, but the module\n     * can return a function as the exported value.\n     */\n    return lunr\n  }))\n})();\n", "/*\n * Copyright (c) 2016-2024 Martin Donath <martin.donath@squidfunk.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to\n * deal in the Software without restriction, including without limitation the\n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n * sell copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A RTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n * IN THE SOFTWARE.\n */\n\nimport lunr from \"lunr\"\n\nimport { getElement } from \"~/browser/element/_\"\nimport \"~/polyfills\"\n\nimport { Search } from \"../../_\"\nimport { SearchConfig } from \"../../config\"\nimport {\n  SearchMessage,\n  SearchMessageType\n} from \"../message\"\n\n/* ----------------------------------------------------------------------------\n * Types\n * ------------------------------------------------------------------------- */\n\n/**\n * Add support for `iframe-worker` shim\n *\n * While `importScripts` is synchronous when executed inside of a web worker,\n * it's not possible to provide a synchronous shim implementation. The cool\n * thing is that awaiting a non-Promise will convert it into a Promise, so\n * extending the type definition to return a `Promise` shouldn't break anything.\n *\n * @see https://bit.ly/2PjDnXi - GitHub comment\n *\n * @param urls - Scripts to load\n *\n * @returns Promise resolving with no result\n */\ndeclare global {\n  function importScripts(...urls: string[]): Promise<void> | void\n}\n\n/* ----------------------------------------------------------------------------\n * Data\n * ------------------------------------------------------------------------- */\n\n/**\n * Search index\n */\nlet index: Search\n\n/* ----------------------------------------------------------------------------\n * Helper functions\n * ------------------------------------------------------------------------- */\n\n/**\n * Fetch (= import) multi-language support through `lunr-languages`\n *\n * This function automatically imports the stemmers necessary to process the\n * languages which are defined as part of the search configuration.\n *\n * If the worker runs inside of an `iframe` (when using `iframe-worker` as\n * a shim), the base URL for the stemmers to be loaded must be determined by\n * searching for the first `script` element with a `src` attribute, which will\n * contain the contents of this script.\n *\n * @param config - Search configuration\n *\n * @returns Promise resolving with no result\n */\nasync function setupSearchLanguages(\n  config: SearchConfig\n): Promise<void> {\n  let base = \"../lunr\"\n\n  /* Detect `iframe-worker` and fix base URL */\n  if (typeof parent !== \"undefined\" && \"IFrameWorker\" in parent) {\n    const worker = getElement<HTMLScriptElement>(\"script[src]\")!\n    const [path] = worker.src.split(\"/worker\")\n\n    /* Prefix base with path */\n    base = base.replace(\"..\", path)\n  }\n\n  /* Add scripts for languages */\n  const scripts = []\n  for (const lang of config.lang) {\n    switch (lang) {\n\n      /* Add segmenter for Japanese */\n      case \"ja\":\n        scripts.push(`${base}/tinyseg.js`)\n        break\n\n      /* Add segmenter for Hindi and Thai */\n      case \"hi\":\n      case \"th\":\n        scripts.push(`${base}/wordcut.js`)\n        break\n    }\n\n    /* Add language support */\n    if (lang !== \"en\")\n      scripts.push(`${base}/min/lunr.${lang}.min.js`)\n  }\n\n  /* Add multi-language support */\n  if (config.lang.length > 1)\n    scripts.push(`${base}/min/lunr.multi.min.js`)\n\n  /* Load scripts synchronously */\n  if (scripts.length)\n    await importScripts(\n      `${base}/min/lunr.stemmer.support.min.js`,\n      ...scripts\n    )\n}\n\n/* ----------------------------------------------------------------------------\n * Functions\n * ------------------------------------------------------------------------- */\n\n/**\n * Message handler\n *\n * @param message - Source message\n *\n * @returns Target message\n */\nexport async function handler(\n  message: SearchMessage\n): Promise<SearchMessage> {\n  switch (message.type) {\n\n    /* Search setup message */\n    case SearchMessageType.SETUP:\n      await setupSearchLanguages(message.data.config)\n      index = new Search(message.data)\n      return {\n        type: SearchMessageType.READY\n      }\n\n    /* Search query message */\n    case SearchMessageType.QUERY:\n      const query = message.data\n      try {\n        return {\n          type: SearchMessageType.RESULT,\n          data: index.search(query)\n        }\n\n      /* Return empty result in case of error */\n      } catch (err) {\n        console.warn(`Invalid query: ${query} \u2013 see https://bit.ly/2s3ChXG`)\n        console.warn(err)\n        return {\n          type: SearchMessageType.RESULT,\n          data: { items: [] }\n        }\n      }\n\n    /* All other messages */\n    default:\n      throw new TypeError(\"Invalid message type\")\n  }\n}\n\n/* ----------------------------------------------------------------------------\n * Worker\n * ------------------------------------------------------------------------- */\n\n/* Expose Lunr.js in global scope, or stemmers won't work */\nself.lunr = lunr\n\n/* Handle messages */\naddEventListener(\"message\", async ev => {\n  postMessage(await handler(ev.data))\n})\n", "/*\n * Copyright (c) 2016-2024 Martin Donath <martin.donath@squidfunk.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to\n * deal in the Software without restriction, including without limitation the\n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n * sell copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n * IN THE SOFTWARE.\n */\n\n/* ----------------------------------------------------------------------------\n * Functions\n * ------------------------------------------------------------------------- */\n\n/**\n * Retrieve all elements matching the query selector\n *\n * @template T - Element type\n *\n * @param selector - Query selector\n * @param node - Node of reference\n *\n * @returns Elements\n */\nexport function getElements<T extends keyof HTMLElementTagNameMap>(\n  selector: T, node?: ParentNode\n): HTMLElementTagNameMap[T][]\n\nexport function getElements<T extends HTMLElement>(\n  selector: string, node?: ParentNode\n): T[]\n\nexport function getElements<T extends HTMLElement>(\n  selector: string, node: ParentNode = document\n): T[] {\n  return Array.from(node.querySelectorAll<T>(selector))\n}\n\n/**\n * Retrieve an element matching a query selector or throw a reference error\n *\n * Note that this function assumes that the element is present. If unsure if an\n * element is existent, use the `getOptionalElement` function instead.\n *\n * @template T - Element type\n *\n * @param selector - Query selector\n * @param node - Node of reference\n *\n * @returns Element\n */\nexport function getElement<T extends keyof HTMLElementTagNameMap>(\n  selector: T, node?: ParentNode\n): HTMLElementTagNameMap[T]\n\nexport function getElement<T extends HTMLElement>(\n  selector: string, node?: ParentNode\n): T\n\nexport function getElement<T extends HTMLElement>(\n  selector: string, node: ParentNode = document\n): T {\n  const el = getOptionalElement<T>(selector, node)\n  if (typeof el === \"undefined\")\n    throw new ReferenceError(\n      `Missing element: expected \"${selector}\" to be present`\n    )\n\n  /* Return element */\n  return el\n}\n\n/* ------------------------------------------------------------------------- */\n\n/**\n * Retrieve an optional element matching the query selector\n *\n * @template T - Element type\n *\n * @param selector - Query selector\n * @param node - Node of reference\n *\n * @returns Element or nothing\n */\nexport function getOptionalElement<T extends keyof HTMLElementTagNameMap>(\n  selector: T, node?: ParentNode\n): HTMLElementTagNameMap[T] | undefined\n\nexport function getOptionalElement<T extends HTMLElement>(\n  selector: string, node?: ParentNode\n): T | undefined\n\nexport function getOptionalElement<T extends HTMLElement>(\n  selector: string, node: ParentNode = document\n): T | undefined {\n  return node.querySelector<T>(selector) || undefined\n}\n\n/**\n * Retrieve the currently active element\n *\n * @returns Element or nothing\n */\nexport function getActiveElement(): HTMLElement | undefined {\n  return (\n    document.activeElement?.shadowRoot?.activeElement as HTMLElement ??\n    document.activeElement as HTMLElement ??\n    undefined\n  )\n}\n", "/*\n * Copyright (c) 2016-2024 Martin Donath <martin.donath@squidfunk.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to\n * deal in the Software without restriction, including without limitation the\n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n * sell copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n * IN THE SOFTWARE.\n */\n\n/* ----------------------------------------------------------------------------\n * Polyfills\n * ------------------------------------------------------------------------- */\n\n/* Polyfill `Object.entries` */\nif (!Object.entries)\n  Object.entries = function (obj: object) {\n    const data: [string, string][] = []\n    for (const key of Object.keys(obj))\n      // @ts-expect-error - ignore property access warning\n      data.push([key, obj[key]])\n\n    /* Return entries */\n    return data\n  }\n\n/* Polyfill `Object.values` */\nif (!Object.values)\n  Object.values = function (obj: object) {\n    const data: string[] = []\n    for (const key of Object.keys(obj))\n      // @ts-expect-error - ignore property access warning\n      data.push(obj[key])\n\n    /* Return values */\n    return data\n  }\n\n/* ------------------------------------------------------------------------- */\n\n/* Polyfills for `Element` */\nif (typeof Element !== \"undefined\") {\n\n  /* Polyfill `Element.scrollTo` */\n  if (!Element.prototype.scrollTo)\n    Element.prototype.scrollTo = function (\n      x?: ScrollToOptions | number, y?: number\n    ): void {\n      if (typeof x === \"object\") {\n        this.scrollLeft = x.left!\n        this.scrollTop = x.top!\n      } else {\n        this.scrollLeft = x!\n        this.scrollTop = y!\n      }\n    }\n\n  /* Polyfill `Element.replaceWith` */\n  if (!Element.prototype.replaceWith)\n    Element.prototype.replaceWith = function (\n      ...nodes: Array<string | Node>\n    ): void {\n      const parent = this.parentNode\n      if (parent) {\n        if (nodes.length === 0)\n          parent.removeChild(this)\n\n        /* Replace children and create text nodes */\n        for (let i = nodes.length - 1; i >= 0; i--) {\n          let node = nodes[i]\n          if (typeof node === \"string\")\n            node = document.createTextNode(node)\n          else if (node.parentNode)\n            node.parentNode.removeChild(node)\n\n          /* Replace child or insert before previous sibling */\n          if (!i)\n            parent.replaceChild(node, this)\n          else\n            parent.insertBefore(this.previousSibling!, node)\n        }\n      }\n    }\n}\n", "/*\n * Copyright (c) 2016-2024 Martin Donath <martin.donath@squidfunk.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to\n * deal in the Software without restriction, including without limitation the\n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n * sell copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n * IN THE SOFTWARE.\n */\n\n/* ----------------------------------------------------------------------------\n * Types\n * ------------------------------------------------------------------------- */\n\n/**\n * Search configuration\n */\nexport interface SearchConfig {\n  lang: string[]                       /* Search languages */\n  separator: string                    /* Search separator */\n  pipeline: SearchPipelineFn[]         /* Search pipeline */\n}\n\n/**\n * Search document\n */\nexport interface SearchDocument {\n  location: string                     /* Document location */\n  title: string                        /* Document title */\n  text: string                         /* Document text */\n  tags?: string[]                      /* Document tags */\n  boost?: number                       /* Document boost */\n  parent?: SearchDocument              /* Document parent */\n}\n\n/**\n * Search options\n */\nexport interface SearchOptions {\n  suggest: boolean                     /* Search suggestions */\n}\n\n/* ------------------------------------------------------------------------- */\n\n/**\n * Search index\n */\nexport interface SearchIndex {\n  config: SearchConfig                 /* Search configuration */\n  docs: SearchDocument[]               /* Search documents */\n  options: SearchOptions               /* Search options */\n}\n\n/* ----------------------------------------------------------------------------\n * Helper types\n * ------------------------------------------------------------------------- */\n\n/**\n * Search pipeline function\n */\ntype SearchPipelineFn =\n  | \"trimmer\"                          /* Trimmer */\n  | \"stopWordFilter\"                   /* Stop word filter */\n  | \"stemmer\"                          /* Stemmer */\n\n/* ----------------------------------------------------------------------------\n * Functions\n * ------------------------------------------------------------------------- */\n\n/**\n * Create a search document map\n *\n * This function creates a mapping of URLs (including anchors) to the actual\n * articles and sections. It relies on the invariant that the search index is\n * ordered with the main article appearing before all sections with anchors.\n * If this is not the case, the logic music be changed.\n *\n * @param docs - Search documents\n *\n * @returns Search document map\n */\nexport function setupSearchDocumentMap(\n  docs: SearchDocument[]\n): Map<string, SearchDocument> {\n  const map = new Map<string, SearchDocument>()\n  for (const doc of docs) {\n    const [path] = doc.location.split(\"#\")\n\n    /* Add document article */\n    const article = map.get(path)\n    if (typeof article === \"undefined\") {\n      map.set(path, doc)\n\n      /* Add document section */\n    } else {\n      map.set(doc.location, doc)\n      doc.parent = article\n    }\n  }\n\n  /* Return search document map */\n  return map\n}\n", "/*\n * Copyright (c) 2016-2024 Martin Donath <martin.donath@squidfunk.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to\n * deal in the Software without restriction, including without limitation the\n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n * sell copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n * IN THE SOFTWARE.\n */\n\n/* ----------------------------------------------------------------------------\n * Helper types\n * ------------------------------------------------------------------------- */\n\n/**\n * Visitor function\n *\n * @param start - Start offset\n * @param end - End offset\n */\ntype VisitorFn = (\n  start: number, end: number\n) => void\n\n/* ----------------------------------------------------------------------------\n * Functions\n * ------------------------------------------------------------------------- */\n\n/**\n * Split a string using the given separator\n *\n * @param input - Input value\n * @param separator - Separator\n * @param fn - Visitor function\n */\nexport function split(\n  input: string, separator: RegExp, fn: VisitorFn\n): void {\n  separator = new RegExp(separator, \"g\")\n\n  /* Split string using separator */\n  let match: RegExpExecArray | null\n  let index = 0\n  do {\n    match = separator.exec(input)\n\n    /* Emit non-empty range */\n    const until = match?.index ?? input.length\n    if (index < until)\n      fn(index, until)\n\n    /* Update last index */\n    if (match) {\n      const [term] = match\n      index = match.index + term.length\n\n      /* Support zero-length lookaheads */\n      if (term.length === 0)\n        separator.lastIndex = match.index + 1\n    }\n  } while (match)\n}\n", "/*\n * Copyright (c) 2016-2024 Martin Donath <martin.donath@squidfunk.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to\n * deal in the Software without restriction, including without limitation the\n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n * sell copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n * IN THE SOFTWARE.\n */\n\n/* ----------------------------------------------------------------------------\n * Types\n * ------------------------------------------------------------------------- */\n\n/**\n * Extraction type\n *\n * This type defines the possible values that are encoded into the first two\n * bits of a section that is part of the blocks of a tokenization table. There\n * are three types of interest: HTML opening and closing tags, as well as the\n * actual text content we need to extract for indexing.\n */\nexport const enum Extract {\n  TAG_OPEN  = 0,                       /* HTML opening tag */\n  TEXT      = 1,                       /* Text content */\n  TAG_CLOSE = 2                        /* HTML closing tag */\n}\n\n/* ----------------------------------------------------------------------------\n * Helper types\n * ------------------------------------------------------------------------- */\n\n/**\n * Visitor function\n *\n * @param block - Block index\n * @param type - Extraction type\n * @param start - Start offset\n * @param end - End offset\n */\ntype VisitorFn = (\n  block: number, type: Extract, start: number, end: number\n) => void\n\n/* ----------------------------------------------------------------------------\n * Functions\n * ------------------------------------------------------------------------- */\n\n/**\n * Split a string into markup and text sections\n *\n * This function scans a string and divides it up into sections of markup and\n * text. For each section, it invokes the given visitor function with the block\n * index, extraction type, as well as start and end offsets. Using a visitor\n * function (= streaming data) is ideal for minimizing pressure on the GC.\n *\n * @param input - Input value\n * @param fn - Visitor function\n */\nexport function extract(\n  input: string, fn: VisitorFn\n): void {\n\n  let block = 0                        /* Current block */\n  let start = 0                        /* Current start offset */\n  let end = 0                          /* Current end offset */\n\n  /* Split string into sections */\n  for (let stack = 0; end < input.length; end++) {\n\n    /* Opening tag after non-empty section */\n    if (input.charAt(end) === \"<\" && end > start) {\n      fn(block, Extract.TEXT, start, start = end)\n\n    /* Closing tag */\n    } else if (input.charAt(end) === \">\") {\n      if (input.charAt(start + 1) === \"/\") {\n        if (--stack === 0)\n          fn(block++, Extract.TAG_CLOSE, start, end + 1)\n\n      /* Tag is not self-closing */\n      } else if (input.charAt(end - 1) !== \"/\") {\n        if (stack++ === 0)\n          fn(block, Extract.TAG_OPEN, start, end + 1)\n      }\n\n      /* New section */\n      start = end + 1\n    }\n  }\n\n  /* Add trailing section */\n  if (end > start)\n    fn(block, Extract.TEXT, start, end)\n}\n", "/*\n * Copyright (c) 2016-2024 Martin Donath <martin.donath@squidfunk.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to\n * deal in the Software without restriction, including without limitation the\n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n * sell copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n * IN THE SOFTWARE.\n */\n\n/* ----------------------------------------------------------------------------\n * Types\n * ------------------------------------------------------------------------- */\n\n/**\n * Position table\n */\nexport type PositionTable = number[][]\n\n/**\n * Position\n */\nexport type Position = number\n\n/* ----------------------------------------------------------------------------\n * Functions\n * ------------------------------------------------------------------------- */\n\n/**\n * Highlight all occurrences in a string\n *\n * This function receives a field's value (e.g. like `title` or `text`), it's\n * position table that was generated during indexing, and the positions found\n * when executing the query. It then highlights all occurrences, and returns\n * their concatenation. In case of multiple blocks, two are returned.\n *\n * @param input - Input value\n * @param table - Table for indexing\n * @param positions - Occurrences\n * @param full - Full results\n *\n * @returns Highlighted string value\n */\nexport function highlight(\n  input: string, table: PositionTable, positions: Position[], full = false\n): string {\n  return highlightAll([input], table, positions, full).pop()!\n}\n\n/**\n * Highlight all occurrences in a set of strings\n *\n * @param inputs - Input values\n * @param table - Table for indexing\n * @param positions - Occurrences\n * @param full - Full results\n *\n * @returns Highlighted string values\n */\nexport function highlightAll(\n  inputs: string[], table: PositionTable, positions: Position[], full = false\n): string[] {\n\n  /* Map blocks to input values */\n  const mapping = [0]\n  for (let t = 1; t < table.length; t++) {\n    const prev = table[t - 1]\n    const next = table[t]\n\n    /* Check if table points to new block */\n    const p = prev[prev.length - 1] >>> 2 & 0x3FF\n    const q = next[0]               >>> 12\n\n    /* Add block to mapping */\n    mapping.push(+(p > q) + mapping[mapping.length - 1])\n  }\n\n  /* Highlight strings one after another */\n  return inputs.map((input, i) => {\n    let cursor = 0\n\n    /* Map occurrences to blocks */\n    const blocks = new Map<number, number[]>()\n    for (const p of positions.sort((a, b) => a - b)) {\n      const index = p & 0xFFFFF\n      const block = p >>> 20\n      if (mapping[block] !== i)\n        continue\n\n      /* Ensure presence of block group */\n      let group = blocks.get(block)\n      if (typeof group === \"undefined\")\n        blocks.set(block, group = [])\n\n      /* Add index to group */\n      group.push(index)\n    }\n\n    /* Just return string, if no occurrences */\n    if (blocks.size === 0)\n      return input\n\n    /* Compute slices */\n    const slices: string[] = []\n    for (const [block, indexes] of blocks) {\n      const t = table[block]\n\n      /* Extract positions and length */\n      const start  = t[0]            >>> 12\n      const end    = t[t.length - 1] >>> 12\n      const length = t[t.length - 1] >>> 2 & 0x3FF\n\n      /* Add prefix, if full results are desired */\n      if (full && start > cursor)\n        slices.push(input.slice(cursor, start))\n\n      /* Extract and highlight slice */\n      let slice = input.slice(start, end + length)\n      for (const j of indexes.sort((a, b) => b - a)) {\n\n        /* Retrieve offset and length of match */\n        const p = (t[j] >>> 12) - start\n        const q = (t[j] >>> 2 & 0x3FF) + p\n\n        /* Wrap occurrence */\n        slice = [\n          slice.slice(0, p),\n          \"<mark>\",\n          slice.slice(p, q),\n          \"</mark>\",\n          slice.slice(q)\n        ].join(\"\")\n      }\n\n      /* Update cursor */\n      cursor = end + length\n\n      /* Append slice and abort if we have two */\n      if (slices.push(slice) === 2)\n        break\n    }\n\n    /* Add suffix, if full results are desired */\n    if (full && cursor < input.length)\n      slices.push(input.slice(cursor))\n\n    /* Return highlighted slices */\n    return slices.join(\"\")\n  })\n}\n", "/*\n * Copyright (c) 2016-2024 Martin Donath <martin.donath@squidfunk.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to\n * deal in the Software without restriction, including without limitation the\n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n * sell copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n * IN THE SOFTWARE.\n */\n\nimport { split } from \"../_\"\nimport {\n  Extract,\n  extract\n} from \"../extract\"\n\n/* ----------------------------------------------------------------------------\n * Functions\n * ------------------------------------------------------------------------- */\n\n/**\n * Split a string or set of strings into tokens\n *\n * This tokenizer supersedes the default tokenizer that is provided by Lunr.js,\n * as it is aware of HTML tags and allows for multi-character splitting.\n *\n * It takes the given inputs, splits each of them into markup and text sections,\n * tokenizes and segments (if necessary) each of them, and then indexes them in\n * a table by using a compact bit representation. Bitwise techniques are used\n * to write and read from the table during indexing and querying.\n *\n * @see https://bit.ly/3W3Xw4J - Search: better, faster, smaller\n *\n * @param input - Input value(s)\n *\n * @returns Tokens\n */\nexport function tokenize(\n  input?: string | string[]\n): lunr.Token[] {\n  const tokens: lunr.Token[] = []\n  if (typeof input === \"undefined\")\n    return tokens\n\n  /* Tokenize strings one after another */\n  const inputs = Array.isArray(input) ? input : [input]\n  for (let i = 0; i < inputs.length; i++) {\n    const table = lunr.tokenizer.table\n    const total = table.length\n\n    /* Split string into sections and tokenize content blocks */\n    extract(inputs[i], (block, type, start, end) => {\n      table[block += total] ||= []\n      switch (type) {\n\n        /* Handle markup */\n        case Extract.TAG_OPEN:\n        case Extract.TAG_CLOSE:\n          table[block].push(\n            start       << 12 |\n            end - start <<  2 |\n            type\n          )\n          break\n\n        /* Handle text content */\n        case Extract.TEXT:\n          const section = inputs[i].slice(start, end)\n          split(section, lunr.tokenizer.separator, (index, until) => {\n\n            /**\n             * Apply segmenter after tokenization. Note that the segmenter will\n             * also split words at word boundaries, which is not what we want,\n             * so we need to check if we can somehow mitigate this behavior.\n             */\n            if (typeof lunr.segmenter !== \"undefined\") {\n              const subsection = section.slice(index, until)\n              if (/^[MHIK]$/.test(lunr.segmenter.ctype_(subsection))) {\n                const segments = lunr.segmenter.segment(subsection)\n                for (let s = 0, l = 0; s < segments.length; s++) {\n\n                  /* Add block to section */\n                  table[block] ||= []\n                  table[block].push(\n                    start + index + l  << 12 |\n                    segments[s].length <<  2 |\n                    type\n                  )\n\n                  /* Add token with position */\n                  tokens.push(new lunr.Token(\n                    segments[s].toLowerCase(), {\n                      position: block << 20 | table[block].length - 1\n                    }\n                  ))\n\n                  /* Keep track of length */\n                  l += segments[s].length\n                }\n                return\n              }\n            }\n\n            /* Add block to section */\n            table[block].push(\n              start + index << 12 |\n              until - index <<  2 |\n              type\n            )\n\n            /* Add token with position */\n            tokens.push(new lunr.Token(\n              section.slice(index, until).toLowerCase(), {\n                position: block << 20 | table[block].length - 1\n              }\n            ))\n          })\n      }\n    })\n  }\n\n  /* Return tokens */\n  return tokens\n}\n", "/*\n * Copyright (c) 2016-2024 Martin Donath <martin.donath@squidfunk.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to\n * deal in the Software without restriction, including without limitation the\n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n * sell copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n * IN THE SOFTWARE.\n */\n\n/* ----------------------------------------------------------------------------\n * Helper types\n * ------------------------------------------------------------------------- */\n\n/**\n * Visitor function\n *\n * @param value - String value\n *\n * @returns String term(s)\n */\ntype VisitorFn = (\n  value: string\n) => string | string[]\n\n/* ----------------------------------------------------------------------------\n * Functions\n * ------------------------------------------------------------------------- */\n\n/**\n * Default transformation function\n *\n * 1. Trim excess whitespace from left and right.\n *\n * 2. Search for parts in quotation marks and prepend a `+` modifier to denote\n *    that the resulting document must contain all parts, converting the query\n *    to an `AND` query (as opposed to the default `OR` behavior). While users\n *    may expect parts enclosed in quotation marks to map to span queries, i.e.\n *    for which order is important, Lunr.js doesn't support them, so the best\n *    we can do is to convert the parts to an `AND` query.\n *\n * 3. Replace control characters which are not located at the beginning of the\n *    query or preceded by white space, or are not followed by a non-whitespace\n *    character or are at the end of the query string. Furthermore, filter\n *    unmatched quotation marks.\n *\n * 4. Split the query string at whitespace, then pass each part to the visitor\n *    function for tokenization, and append a wildcard to every resulting term\n *    that is not explicitly marked with a `+`, `-`, `~` or `^` modifier, since\n *    it ensures consistent and stable ranking when multiple terms are entered.\n *    Also, if a fuzzy or boost modifier are given, but no numeric value has\n *    been entered, default to 1 to not induce a query error.\n *\n * @param query - Query value\n * @param fn - Visitor function\n *\n * @returns Transformed query value\n */\nexport function transform(\n  query: string, fn: VisitorFn = term => term\n): string {\n  return query\n\n    /* => 1 */\n    .trim()\n\n    /* => 2 */\n    .split(/\"([^\"]+)\"/g)\n      .map((parts, index) => index & 1\n        ? parts.replace(/^\\b|^(?![^\\x00-\\x7F]|$)|\\s+/g, \" +\")\n        : parts\n      )\n      .join(\"\")\n\n    /* => 3 */\n    .replace(/\"|(?:^|\\s+)[*+\\-:^~]+(?=\\s+|$)/g, \"\")\n\n    /* => 4 */\n    .split(/\\s+/g)\n      .reduce((prev, term) => {\n        const next = fn(term)\n        return [...prev, ...Array.isArray(next) ? next : [next]]\n      }, [] as string[])\n      .map(term => /([~^]$)/.test(term) ? `${term}1` : term)\n      .map(term => /(^[+-]|[~^]\\d+$)/.test(term) ? term : `${term}*`)\n      .join(\" \")\n}\n", "/*\n * Copyright (c) 2016-2024 Martin Donath <martin.donath@squidfunk.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to\n * deal in the Software without restriction, including without limitation the\n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n * sell copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n * IN THE SOFTWARE.\n */\n\nimport { split } from \"../../internal\"\nimport { transform } from \"../transform\"\n\n/* ----------------------------------------------------------------------------\n * Types\n * ------------------------------------------------------------------------- */\n\n/**\n * Search query clause\n */\nexport interface SearchQueryClause {\n  presence: lunr.Query.presence        /* Clause presence */\n  term: string                         /* Clause term */\n}\n\n/* ------------------------------------------------------------------------- */\n\n/**\n * Search query terms\n */\nexport type SearchQueryTerms = Record<string, boolean>\n\n/* ----------------------------------------------------------------------------\n * Functions\n * ------------------------------------------------------------------------- */\n\n/**\n * Transform search query\n *\n * This function lexes the given search query and applies the transformation\n * function to each term, preserving markup like `+` and `-` modifiers.\n *\n * @param query - Search query\n *\n * @returns Search query\n */\nexport function transformSearchQuery(\n  query: string\n): string {\n\n  /* Split query terms with tokenizer */\n  return transform(query, part => {\n    const terms: string[] = []\n\n    /* Initialize lexer and analyze part */\n    const lexer = new lunr.QueryLexer(part)\n    lexer.run()\n\n    /* Extract and tokenize term from lexeme */\n    for (const { type, str: term, start, end } of lexer.lexemes)\n      switch (type) {\n\n        /* Hack: remove colon - see https://bit.ly/3wD3T3I */\n        case \"FIELD\":\n          if (![\"title\", \"text\", \"tags\"].includes(term))\n            part = [\n              part.slice(0, end),\n              \" \",\n              part.slice(end + 1)\n            ].join(\"\")\n          break\n\n        /* Tokenize term */\n        case \"TERM\":\n          split(term, lunr.tokenizer.separator, (...range) => {\n            terms.push([\n              part.slice(0, start),\n              term.slice(...range),\n              part.slice(end)\n            ].join(\"\"))\n          })\n      }\n\n    /* Return terms */\n    return terms\n  })\n}\n\n/* ------------------------------------------------------------------------- */\n\n/**\n * Parse a search query for analysis\n *\n * Lunr.js itself has a bug where it doesn't detect or remove wildcards for\n * query clauses, so we must do this here.\n *\n * @see https://bit.ly/3DpTGtz - GitHub issue\n *\n * @param value - Query value\n *\n * @returns Search query clauses\n */\nexport function parseSearchQuery(\n  value: string\n): SearchQueryClause[] {\n  const query  = new lunr.Query([\"title\", \"text\", \"tags\"])\n  const parser = new lunr.QueryParser(value, query)\n\n  /* Parse Search query */\n  parser.parse()\n  for (const clause of query.clauses) {\n    clause.usePipeline = true\n\n    /* Handle leading wildcard */\n    if (clause.term.startsWith(\"*\")) {\n      clause.wildcard = lunr.Query.wildcard.LEADING\n      clause.term = clause.term.slice(1)\n    }\n\n    /* Handle trailing wildcard */\n    if (clause.term.endsWith(\"*\")) {\n      clause.wildcard = lunr.Query.wildcard.TRAILING\n      clause.term = clause.term.slice(0, -1)\n    }\n  }\n\n  /* Return query clauses */\n  return query.clauses\n}\n\n/**\n * Analyze the search query clauses in regard to the search terms found\n *\n * @param query - Search query clauses\n * @param terms - Search terms\n *\n * @returns Search query terms\n */\nexport function getSearchQueryTerms(\n  query: SearchQueryClause[], terms: string[]\n): SearchQueryTerms {\n  const clauses = new Set<SearchQueryClause>(query)\n\n  /* Match query clauses against terms */\n  const result: SearchQueryTerms = {}\n  for (let t = 0; t < terms.length; t++)\n    for (const clause of clauses)\n      if (terms[t].startsWith(clause.term)) {\n        result[clause.term] = true\n        clauses.delete(clause)\n      }\n\n  /* Annotate unmatched non-stopword query clauses */\n  for (const clause of clauses)\n    if (lunr.stopWordFilter?.(clause.term))\n      result[clause.term] = false\n\n  /* Return query terms */\n  return result\n}\n", "/*\n * Copyright (c) 2016-2024 Martin Donath <martin.donath@squidfunk.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to\n * deal in the Software without restriction, including without limitation the\n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n * sell copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n * IN THE SOFTWARE.\n */\n\n/* ----------------------------------------------------------------------------\n * Functions\n * ------------------------------------------------------------------------- */\n\n/**\n * Segment a search query using the inverted index\n *\n * This function implements a clever approach to text segmentation for Asian\n * languages, as it used the information already available in the search index.\n * The idea is to greedily segment the search query based on the tokens that are\n * already part of the index, as described in the linked issue.\n *\n * @see https://bit.ly/3lwjrk7 - GitHub issue\n *\n * @param query - Query value\n * @param index - Inverted index\n *\n * @returns Segmented query value\n */\nexport function segment(\n  query: string, index: object\n): Iterable<string> {\n  const segments = new Set<string>()\n\n  /* Segment search query */\n  const wordcuts = new Uint16Array(query.length)\n  for (let i = 0; i < query.length; i++)\n    for (let j = i + 1; j < query.length; j++) {\n      const value = query.slice(i, j)\n      if (value in index)\n        wordcuts[i] = j - i\n    }\n\n  /* Compute longest matches with minimum overlap */\n  const stack = [0]\n  for (let s = stack.length; s > 0;) {\n    const p = stack[--s]\n    for (let q = 1; q < wordcuts[p]; q++)\n      if (wordcuts[p + q] > wordcuts[p] - q) {\n        segments.add(query.slice(p, p + q))\n        stack[s++] = p + q\n      }\n\n    /* Continue at end of query string */\n    const q = p + wordcuts[p]\n    if (wordcuts[q] && q < query.length - 1)\n      stack[s++] = q\n\n    /* Add current segment */\n    segments.add(query.slice(p, q))\n  }\n\n  // @todo fix this case in the code block above, this is a hotfix\n  if (segments.has(\"\"))\n    return new Set([query])\n\n  /* Return segmented query value */\n  return segments\n}\n", "/*\n * Copyright (c) 2016-2024 Martin Donath <martin.donath@squidfunk.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to\n * deal in the Software without restriction, including without limitation the\n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n * sell copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n * IN THE SOFTWARE.\n */\n\nimport {\n  SearchDocument,\n  SearchIndex,\n  SearchOptions,\n  setupSearchDocumentMap\n} from \"../config\"\nimport {\n  Position,\n  PositionTable,\n  highlight,\n  highlightAll,\n  tokenize\n} from \"../internal\"\nimport {\n  SearchQueryTerms,\n  getSearchQueryTerms,\n  parseSearchQuery,\n  segment,\n  transformSearchQuery\n} from \"../query\"\n\n/* ----------------------------------------------------------------------------\n * Types\n * ------------------------------------------------------------------------- */\n\n/**\n * Search item\n */\nexport interface SearchItem\n  extends SearchDocument\n{\n  score: number                        /* Score (relevance) */\n  terms: SearchQueryTerms              /* Search query terms */\n}\n\n/**\n * Search result\n */\nexport interface SearchResult {\n  items: SearchItem[][]                /* Search items */\n  suggest?: string[]                   /* Search suggestions */\n}\n\n/* ----------------------------------------------------------------------------\n * Functions\n * ------------------------------------------------------------------------- */\n\n/**\n * Create field extractor factory\n *\n * @param table - Position table map\n *\n * @returns Extractor factory\n */\nfunction extractor(table: Map<string, PositionTable>) {\n  return (name: keyof SearchDocument) => {\n    return (doc: SearchDocument) => {\n      if (typeof doc[name] === \"undefined\")\n        return undefined\n\n      /* Compute identifier and initialize table */\n      const id = [doc.location, name].join(\":\")\n      table.set(id, lunr.tokenizer.table = [])\n\n      /* Return field value */\n      return doc[name]\n    }\n  }\n}\n\n/**\n * Compute the difference of two lists of strings\n *\n * @param a - 1st list of strings\n * @param b - 2nd list of strings\n *\n * @returns Difference\n */\nfunction difference(a: string[], b: string[]): string[] {\n  const [x, y] = [new Set(a), new Set(b)]\n  return [\n    ...new Set([...x].filter(value => !y.has(value)))\n  ]\n}\n\n/* ----------------------------------------------------------------------------\n * Class\n * ------------------------------------------------------------------------- */\n\n/**\n * Search index\n */\nexport class Search {\n\n  /**\n   * Search document map\n   */\n  protected map: Map<string, SearchDocument>\n\n  /**\n   * Search options\n   */\n  protected options: SearchOptions\n\n  /**\n   * The underlying Lunr.js search index\n   */\n  protected index: lunr.Index\n\n  /**\n   * Internal position table map\n   */\n  protected table: Map<string, PositionTable>\n\n  /**\n   * Create the search integration\n   *\n   * @param data - Search index\n   */\n  public constructor({ config, docs, options }: SearchIndex) {\n    const field = extractor(this.table = new Map())\n\n    /* Set up document map and options */\n    this.map = setupSearchDocumentMap(docs)\n    this.options = options\n\n    /* Set up document index */\n    this.index = lunr(function () {\n      this.metadataWhitelist = [\"position\"]\n      this.b(0)\n\n      /* Set up (multi-)language support */\n      if (config.lang.length === 1 && config.lang[0] !== \"en\") {\n        // @ts-expect-error - namespace indexing not supported\n        this.use(lunr[config.lang[0]])\n      } else if (config.lang.length > 1) {\n        this.use(lunr.multiLanguage(...config.lang))\n      }\n\n      /* Set up custom tokenizer (must be after language setup) */\n      this.tokenizer = tokenize as typeof lunr.tokenizer\n      lunr.tokenizer.separator = new RegExp(config.separator)\n\n      /* Set up custom segmenter, if loaded */\n      lunr.segmenter = \"TinySegmenter\" in lunr\n        ? new lunr.TinySegmenter()\n        : undefined\n\n      /* Compute functions to be removed from the pipeline */\n      const fns = difference([\n        \"trimmer\", \"stopWordFilter\", \"stemmer\"\n      ], config.pipeline)\n\n      /* Remove functions from the pipeline for registered languages */\n      for (const lang of config.lang.map(language => (\n        // @ts-expect-error - namespace indexing not supported\n        language === \"en\" ? lunr : lunr[language]\n      )))\n        for (const fn of fns) {\n          this.pipeline.remove(lang[fn])\n          this.searchPipeline.remove(lang[fn])\n        }\n\n      /* Set up index reference */\n      this.ref(\"location\")\n\n      /* Set up index fields */\n      this.field(\"title\", { boost: 1e3, extractor: field(\"title\") })\n      this.field(\"text\",  { boost: 1e0, extractor: field(\"text\") })\n      this.field(\"tags\",  { boost: 1e6, extractor: field(\"tags\") })\n\n      /* Add documents to index */\n      for (const doc of docs)\n        this.add(doc, { boost: doc.boost })\n    })\n  }\n\n  /**\n   * Search for matching documents\n   *\n   * @param query - Search query\n   *\n   * @returns Search result\n   */\n  public search(query: string): SearchResult {\n\n    // Experimental Chinese segmentation\n    query = query.replace(/\\p{sc=Han}+/gu, value => {\n      return [...segment(value, this.index.invertedIndex)]\n        .join(\"* \")\n    })\n\n    // @todo: move segmenter (above) into transformSearchQuery\n    query = transformSearchQuery(query)\n    if (!query)\n      return { items: [] }\n\n    /* Parse query to extract clauses for analysis */\n    const clauses = parseSearchQuery(query)\n      .filter(clause => (\n        clause.presence !== lunr.Query.presence.PROHIBITED\n      ))\n\n    /* Perform search and post-process results */\n    const groups = this.index.search(query)\n\n      /* Apply post-query boosts based on title and search query terms */\n      .reduce<SearchItem[]>((item, { ref, score, matchData }) => {\n        let doc = this.map.get(ref)\n        if (typeof doc !== \"undefined\") {\n\n          /* Shallow copy document */\n          doc = { ...doc }\n          if (doc.tags)\n            doc.tags = [...doc.tags]\n\n          /* Compute and analyze search query terms */\n          const terms = getSearchQueryTerms(\n            clauses,\n            Object.keys(matchData.metadata)\n          )\n\n          /* Highlight matches in fields */\n          for (const field of this.index.fields) {\n            if (typeof doc[field] === \"undefined\")\n              continue\n\n            /* Collect positions from matches */\n            const positions: Position[] = []\n            for (const match of Object.values(matchData.metadata))\n              if (typeof match[field] !== \"undefined\")\n                positions.push(...match[field].position)\n\n            /* Skip highlighting, if no positions were collected */\n            if (!positions.length)\n              continue\n\n            /* Load table and determine highlighting method */\n            const table = this.table.get([doc.location, field].join(\":\"))!\n            const fn = Array.isArray(doc[field])\n              ? highlightAll\n              : highlight\n\n            // @ts-expect-error - stop moaning, TypeScript!\n            doc[field] = fn(doc[field], table, positions, field !== \"text\")\n          }\n\n          /* Highlight title and text and apply post-query boosts */\n          const boost = +!doc.parent +\n            Object.values(terms)\n              .filter(t => t).length /\n            Object.keys(terms).length\n\n          /* Append item */\n          item.push({\n            ...doc,\n            score: score * (1 + boost ** 2),\n            terms\n          })\n        }\n        return item\n      }, [])\n\n      /* Sort search results again after applying boosts */\n      .sort((a, b) => b.score - a.score)\n\n      /* Group search results by article */\n      .reduce((items, result) => {\n        const doc = this.map.get(result.location)\n        if (typeof doc !== \"undefined\") {\n          const ref = doc.parent\n            ? doc.parent.location\n            : doc.location\n          items.set(ref, [...items.get(ref) || [], result])\n        }\n        return items\n      }, new Map<string, SearchItem[]>())\n\n    /* Ensure that every item set has an article */\n    for (const [ref, items] of groups)\n      if (!items.find(item => item.location === ref)) {\n        const doc = this.map.get(ref)!\n        items.push({ ...doc, score: 0, terms: {} })\n      }\n\n    /* Generate search suggestions, if desired */\n    let suggest: string[] | undefined\n    if (this.options.suggest) {\n      const titles = this.index.query(builder => {\n        for (const clause of clauses)\n          builder.term(clause.term, {\n            fields: [\"title\"],\n            presence: lunr.Query.presence.REQUIRED,\n            wildcard: lunr.Query.wildcard.TRAILING\n          })\n      })\n\n      /* Retrieve suggestions for best match */\n      suggest = titles.length\n        ? Object.keys(titles[0].matchData.metadata)\n        : []\n    }\n\n    /* Return search result */\n    return {\n      items: [...groups.values()],\n      ...typeof suggest !== \"undefined\" && { suggest }\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": ["lunr", "index", "porterStemmer", "extractor", "parent", "index", "index", "index", "index", "index", "q", "lunr"]
}
